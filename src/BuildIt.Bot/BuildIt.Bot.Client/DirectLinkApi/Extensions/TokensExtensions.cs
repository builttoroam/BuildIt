// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System.Threading;
using System.Threading.Tasks;
using BuildIt.Bot.Client.DirectLinkApi.Interfaces;

namespace BuildIt.Bot.Client.DirectLinkApi.Extensions
{
    public static partial class TokensExtensions
    {
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.ITokens.
        /// </param>
        public static string GenerateTokenForNewConversation(this ITokens operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITokens)s).GenerateTokenForNewConversationAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.ITokens.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GenerateTokenForNewConversationAsync(this ITokens operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GenerateTokenForNewConversationWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.ITokens.
        /// </param>
        /// <param name='conversationId'>
        /// Required.
        /// </param>
        public static string RenewToken(this ITokens operations, string conversationId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITokens)s).RenewTokenAsync(conversationId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.ITokens.
        /// </param>
        /// <param name='conversationId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> RenewTokenAsync(this ITokens operations, string conversationId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.RenewTokenWithOperationResponseAsync(conversationId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
