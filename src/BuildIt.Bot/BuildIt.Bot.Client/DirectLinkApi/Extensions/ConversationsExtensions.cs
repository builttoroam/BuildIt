// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System.Threading;
using System.Threading.Tasks;
using BuildIt.Bot.Client.DirectLinkApi.Interfaces;
using BuildIt.Bot.Client.DirectLinkApi.Models;

namespace BuildIt.Bot.Client.DirectLinkApi.Extensions
{
    /// <summary>
    /// 
    /// </summary>
    public static partial class ConversationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required. Conversation ID
        /// </param>
        /// <param name='watermark'>
        /// Optional. (Optional) only returns messages newer than this watermark
        /// </param>
        public static MessageSet GetMessages(this IConversations operations, string conversationId, string watermark = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConversations)s).GetMessagesAsync(conversationId, watermark);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required. Conversation ID
        /// </param>
        /// <param name='watermark'>
        /// Optional. (Optional) only returns messages newer than this watermark
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<MessageSet> GetMessagesAsync(this IConversations operations, string conversationId, string watermark = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<DirectLinkApi.Models.MessageSet> result = await operations.GetMessagesWithOperationResponseAsync(conversationId, watermark, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.IConversations.
        /// </param>
        public static Conversation NewConversation(this IConversations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConversations)s).NewConversationAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.IConversations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Conversation> NewConversationAsync(this IConversations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<DirectLinkApi.Models.Conversation> result = await operations.NewConversationWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required. Conversation ID
        /// </param>
        /// <param name='message'>
        /// Required. Message to send
        /// </param>
        public static object PostMessage(this IConversations operations, string conversationId, Message message)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConversations)s).PostMessageAsync(conversationId, message);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required. Conversation ID
        /// </param>
        /// <param name='message'>
        /// Required. Message to send
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostMessageAsync(this IConversations operations, string conversationId, Message message, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostMessageWithOperationResponseAsync(conversationId, message, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required.
        /// </param>
        public static object Upload(this IConversations operations, string conversationId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConversations)s).UploadAsync(conversationId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DirectLinkApi.IConversations.
        /// </param>
        /// <param name='conversationId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> UploadAsync(this IConversations operations, string conversationId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.UploadWithOperationResponseAsync(conversationId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
