{
  "swagger": "2.0",
  "info": {
    "title": "Academic Search API",
    "version": "1.0"
  },
  "host": "api.projectoxford.ai",
  "basePath": "/academic/v1.0",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/interpret": {
      "get": {
        "description": "The interpret REST API takes an end user query string (i.e., a query entered by a user of your application) and returns formatted interpretations of user intent based on the Academic Graph data and the Academic Grammar.\nTo provide an interactive experience, you can call this method repeatedly after each character entered by the user. In that case, you should set the complete parameter to 1 to enable auto-complete suggestions. If your application does not want auto-completion, you should set the complete parameter to 0.",
        "operationId": "Interpret",
        "parameters": [
          {
            "name": "complete",
            "in": "query",
            "description": "1 means that auto-completion suggestions are generated based on the grammar and graph data.",
            "type": "boolean",
            "default": "0",
            "enum": [
              "0"
            ]
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of interpretations to return.",
            "type": "number",
            "default": "10",
            "enum": [
              "10"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first interpretation to return. For example, count=2&offset=0 returns interpretations 0 and 1. count=2&offset=2 returns interpretations 2 and 3.",
            "type": "number",
            "enum": [
              "0"
            ]
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout in milliseconds. Only interpretations found before the timeout has elapsed are returned.",
            "type": "number",
            "enum": [
              "1000"
            ]
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query entered by user. If complete is set to 1, query will be interpreted as a prefix for generating query auto-completion suggestions.",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "query",
            "description": "Name of the model that you wish to query. Currently, the value defaults to \"latest\".\n",
            "type": "string",
            "default": "latest",
            "enum": [
              "beta-2015",
              "latest"
            ]
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p class=\"ng-scope\">Response (JSON)</p>\r\n<div id=\"preview-sp-24\" class=\"preview-splitter ng-scope\">&nbsp;</div>\r\n<table class=\"ng-scope\" border=\"1px solid black\">\r\n<thead>\r\n<tr><th>Name</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><span>query</span></td>\r\n<td>The&nbsp;<em>query</em>&nbsp;parameter from the request.</td>\r\n</tr>\r\n<tr>\r\n<td><span>interpretations</span></td>\r\n<td>An array of 0 or more different ways of matching user input against the grammar.</td>\r\n</tr>\r\n<tr>\r\n<td><span>interpretations[x].prob</span></td>\r\n<td>The relative probability of the interpretation, on a scale from 0 to 1. A higher value means more likely.</td>\r\n</tr>\r\n<tr>\r\n<td><span>interpretations[x].parse</span></td>\r\n<td>An XML string that shows how each part of the query was interpreted.</td>\r\n</tr>\r\n<tr>\r\n<td><span>interpretations[x].rules</span></td>\r\n<td>An array of 1 or more rules defined in the grammar that were invoked during interpretation. For the Academic Knowledge API, there will always be 1 rule.</td>\r\n</tr>\r\n<tr>\r\n<td><span>interpretations[x].rules[y].name</span></td>\r\n<td>Name of the rule.</td>\r\n</tr>\r\n<tr>\r\n<td><span>interpretations[x].rules[y].output</span></td>\r\n<td>Output of the rule.</td>\r\n</tr>\r\n<tr>\r\n<td><span>interpretations[x].rules[y].output.type</span></td>\r\n<td>The data type of the output of the rule. For the Academic Knowledge API, this will always be \"query\".</td>\r\n</tr>\r\n<tr>\r\n<td><span>interpretations[x].rules[y].output.value</span></td>\r\n<td>The output of the rule. For the Academic Knowledge API, this is a query expression string that can be passed to the evaluate and calchistogram methods.</td>\r\n</tr>\r\n<tr>\r\n<td><span>aborted</span></td>\r\n<td>True if the request timed out.<br /></td>\r\n</tr>\r\n</tbody>\r\n</table>",
            "examples": {
              "application/json": {
                "query": "papers by jaime",
                "interpretations": [
                  {
                    "prob": 2.429E-06,
                    "parse": "<rule id=\"#GetPapers\">papers by <attr name=\"academic#AA.AuN\">jaime teevan</attr></rule>",
                    "rules": [
                      {
                        "name": "#GetPapers",
                        "output": {
                          "type": "query",
                          "value": "Composite(AA.AuN=='jaime teevan')"
                        }
                      }
                    ]
                  },
                  {
                    "prob": 1.416E-06,
                    "parse": "<rule id=\"#GetPapers\">papers by <attr name=\"academic#AA.AuN\" canonical=\"j l green\">jaime green</attr></rule>",
                    "rules": [
                      {
                        "name": "#GetPapers",
                        "output": {
                          "type": "query",
                          "value": "Composite(AA.AuN=='j l green')"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Bad Argument",
                  "message": "parameter is missing."
                }
              }
            }
          },
          "401": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "500": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Internal server error."
                }
              }
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "The requested resource is not found."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Out of call volume quota. Quota will be replenished later."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/evaluate": {
      "get": {
        "description": "The evaluate REST API is used to return a set of academic entities based on a query expression.",
        "operationId": "Evaluate",
        "parameters": [
          {
            "name": "expr",
            "in": "query",
            "description": "A query expression that specifies which entities should be returned.",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "query",
            "description": "Name of the model that you wish to query. Currently, the value defaults to \"latest\".\n",
            "type": "string",
            "default": "latest",
            "enum": [
              "beta-2015",
              "latest"
            ]
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of results to return.",
            "type": "number",
            "default": "10",
            "enum": [
              "10"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result to return.",
            "type": "number",
            "default": "0",
            "enum": [
              "0"
            ]
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Name of an attribute that is used for sorting the entities. Optionally, ascending/descending can be specified. The format is: name:asc or name:desc.",
            "type": "string"
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma delimited list that specifies the attribute values that are included in the response. Attribute names are case-sensitive.",
            "type": "string",
            "default": "Id",
            "enum": [
              "Id"
            ]
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p class=\"ng-scope\">Response (JSON)</p>\n<div id=\"preview-sp-19\" class=\"preview-splitter ng-scope\">&nbsp;</div>\n<table class=\"ng-scope\" border=\"1px solid black\">\n    <thead>\n        <tr><th>Name</th><th>Description</th></tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><span>expr</span></td>\n            <td>The&nbsp;<em>expr</em>&nbsp;parameter from the request.</td>\n        </tr>\n        <tr>\n            <td><span>entities</span></td>\n            <td>An array of 0 or more entities that matched the query expression. Each entity contains a&nbsp;<em>prob</em>value and the values of other requested attributes.</td>\n        </tr>\n        <tr>\n            <td><span>aborted</span></td>\n            <td>True if the request timed out.</td>\n        </tr>\n    </tbody>\n</table>\n<h2 class=\"ng-scope\">&nbsp;</h2>\n<div id=\"preview-sp-25\" class=\"preview-splitter ng-scope\">&nbsp;</div>",
            "examples": {
              "application/json": {
                "expr": "Composite(AA.AuN=='jaime teevan')",
                "entities": [
                  {
                    "prob": 2.266E-07,
                    "Ti": "personalizing search via automated analysis of interests and activities",
                    "Y": 2005,
                    "CC": 372,
                    "AA": [
                      {
                        "AuN": "jaime teevan",
                        "AuId": 1968481722
                      },
                      {
                        "AuN": "susan t dumais",
                        "AuId": 676500258
                      },
                      {
                        "AuN": "eric horvitz",
                        "AuId": 1470530979
                      }
                    ]
                  },
                  {
                    "prob": 1.723E-07,
                    "Ti": "the perfect search engine is not enough a study of orienteering behavior in directed search",
                    "Y": 2004,
                    "CC": 237,
                    "AA": [
                      {
                        "AuN": "jaime teevan",
                        "AuId": 1982462162
                      },
                      {
                        "AuN": "christine alvarado",
                        "AuId": 2163512453
                      },
                      {
                        "AuN": "mark s ackerman",
                        "AuId": 2055132526
                      },
                      {
                        "AuN": "david r karger",
                        "AuId": 2012534293
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Bad Argument",
                  "message": "The parameter is missing."
                }
              }
            }
          },
          "401": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "500": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Internal server error."
                }
              }
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "The requested resource is not found."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Out of call volume quota. Quota will be replenished later."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/calchistogram": {
      "get": {
        "description": "The calchistogram REST API is used to calculate the distribution of attribute values for a set of paper entities.",
        "operationId": "CalcHistogram",
        "parameters": [
          {
            "name": "expr",
            "in": "query",
            "description": "A query expression that specifies the entities over which to calculate histograms.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "query",
            "description": "Name of the model that you wish to query. Currently, the value defaults to \"latest\".\n",
            "type": "string",
            "default": "latest",
            "enum": [
              "beta-2015",
              "latest"
            ]
          },
          {
            "name": "attributes",
            "in": "query",
            "description": "A comma delimited list that specifies the attribute values that are included in the response. Attribute names are case-sensitive.",
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of results to return.",
            "type": "number",
            "default": "10",
            "enum": [
              "10"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Index of the first result to return.",
            "type": "number",
            "default": "0",
            "enum": [
              "0"
            ]
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "<p class=\"ng-scope\">Response (JSON)</p>\n<div id=\"preview-sp-20\" class=\"preview-splitter ng-scope\">&nbsp;</div>\n<table class=\"ng-scope\" border=\"1px solid black\">\n    <thead>\n        <tr><th>Name</th><th>Description</th></tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><span>expr</span></td>\n            <td>The expr parameter from the request.</td>\n        </tr>\n        <tr>\n            <td><span>num_entities</span></td>\n            <td>Total number of matching entities.</td>\n        </tr>\n        <tr>\n            <td><span>histograms</span></td>\n            <td>An array of histograms, one for each attribute specified in the request.</td>\n        </tr>\n        <tr>\n            <td><span>histograms[x].attribute</span></td>\n            <td>Name of the attribute over which the histogram was computed.</td>\n        </tr>\n        <tr>\n            <td><span>histograms[x].distinct_values</span></td>\n            <td>Number of distinct values among matching entities for this attribute.</td>\n        </tr>\n        <tr>\n            <td><span>histograms[x].total_count</span></td>\n            <td>Total number of value instances among matching entities for this attribute.</td>\n        </tr>\n        <tr>\n            <td><span>histograms[x].histogram</span></td>\n            <td>Histogram data for this attribute.</td>\n        </tr>\n        <tr>\n            <td><span>histograms[x].histogram[y].value</span></td>\n            <td>A value for the attribute.</td>\n        </tr>\n        <tr>\n            <td><span>histograms[x].histogram[y].prob</span></td>\n            <td>Total probability of matching entities with this attribute value.</td>\n        </tr>\n        <tr>\n            <td><span>histograms[x].histogram[y].count</span></td>\n            <td>Number of matching entities with this attribute value.</td>\n        </tr>\n        <tr>\n            <td><span>aborted</span></td>\n            <td>True if the request timed out.</td>\n        </tr>\n    </tbody>\n</table>\n<div id=\"preview-sp-25\" class=\"preview-splitter ng-scope\">&nbsp;</div>",
            "examples": {
              "application/json": {
                "expr": "And(Composite(AA.AuN=='jaime teevan'),Y>2012)",
                "num_entities": 37,
                "histograms": [
                  {
                    "attribute": "Y",
                    "distinct_values": 3,
                    "total_count": 37,
                    "histogram": [
                      {
                        "value": 2014,
                        "prob": 1.275E-07,
                        "count": 15
                      },
                      {
                        "value": 2013,
                        "prob": 1.184E-07,
                        "count": 12
                      },
                      {
                        "value": 2015,
                        "prob": 8.279E-08,
                        "count": 10
                      }
                    ]
                  },
                  {
                    "attribute": "F.FN",
                    "distinct_values": 34,
                    "total_count": 53,
                    "histogram": [
                      {
                        "value": "crowdsourcing",
                        "prob": 7.218E-08,
                        "count": 9
                      },
                      {
                        "value": "information retrieval",
                        "prob": 4.082E-08,
                        "count": 4
                      },
                      {
                        "value": "personalization",
                        "prob": 2.384E-08,
                        "count": 3
                      },
                      {
                        "value": "mobile search",
                        "prob": 2.119E-08,
                        "count": 2
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Bad Argument",
                  "message": "The parameter is missing."
                }
              }
            }
          },
          "401": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Access denied due to invalid subscription key. Make sure you are subscribed to an API you are trying to call and provide the right key."
                }
              }
            }
          },
          "500": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Internal server error."
                }
              }
            }
          },
          "404": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "The requested resource is not found."
                }
              }
            }
          },
          "403": {
            "description": "",
            "examples": {
              "application/json": {
                "error": {
                  "code": "QuotaExceeded",
                  "message": "Out of call volume quota. Quota will be replenished later."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/graph/search": {
      "post": {
        "description": "Welcome to the Microsoft Cognitive Service Academic Search API, a web service for retrieving paths and subgraphs from Microsoft Academic Graph. The graph query interface powered by Graph Engine allows us to not only query entities that meet certain criteria (e.g. find a paper with a given title), but also perform pattern matching via graph exploration (e.g. detect co-authorship).",
        "operationId": "GraphSearch",
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "description": "Request type of query. Should be \"json\" or \"lambda\"",
            "required": true,
            "type": "string",
            "enum": [
              "json",
              "lambda"
            ]
          },
          {
            "name": "subscription-key",
            "in": "query",
            "description": "subscription key in url",
            "type": "string"
          },
          {
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header",
            "description": "subscription key in header",
            "type": "string"
          }
        ],
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "<p class=\"ng-scope\">A successful call returns an array of entities for a given query.</p>\r\n<div id=\"preview-sp-24\" class=\"preview-splitter ng-scope\">&nbsp;</div>\r\n<table class=\"ng-scope\" border=\"1px solid black\">\r\n<thead>\r\n<tr><th>Name</th><th>Description</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><span>Results</span></td>\r\n<td>An array of 0 or more paths that matches the graph query request.</td>\r\n</tr>\r\n<tr>\r\n<td><span>Results[x]</span></td>\r\n<td>A path that matches the graph query request. The path is an array of 1 or more entities.</td>\r\n</tr>\r\n<tr>\r\n<td><span>Results[x][y]</span></td>\r\n<td>An entity in a matched path.</td>\r\n</tr>\r\n<tr>\r\n<td><span>Results[x][y].CellID</span></td>\r\n<td>The identifier for the entity. Could be used in the query request to specify the entity.</td>\r\n</tr>\r\n<tr>\r\n<td><span>Results[x][y].z</span></td>\r\n<td>A serialized json string representing the value of the property z selected from the entity.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n",
            "examples": {
              "application/json": {
                "Results": [
                  [
                    {
                      "CellID": 2160459668,
                      "OriginalTitle": "Trinity: a distributed graph engine on a memory cloud"
                    },
                    {
                      "CellID": 2093502026
                    }
                  ],
                  [
                    {
                      "CellID": 2171539317,
                      "OriginalTitle": "A distributed graph engine for web scale RDF data"
                    },
                    {
                      "CellID": 2093502026
                    }
                  ],
                  [
                    {
                      "CellID": 2411554868,
                      "OriginalTitle": "A distributed graph engine for web scale RDF data"
                    },
                    {
                      "CellID": 2093502026
                    }
                  ],
                  [
                    {
                      "CellID": 73304046,
                      "OriginalTitle": "The Trinity graph engine"
                    },
                    {
                      "CellID": 2093502026
                    }
                  ]
                ]
              }
            }
          },
          "400": {
            "description": "<p class=\"ng-scope\">The detail of the error will be given in the message of the error object.</p>\r\n<div id=\"preview-sp-24\" class=\"preview-splitter ng-scope\">&nbsp;</div>\r\n<table class=\"ng-scope\" border=\"1px solid black\">\r\n<thead>\r\n<tr><th>code</th><th>message</th></tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>BadArgument</td><td>The input is not a valid Json object.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>Query string not found.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>Syntax error.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>Invalid prolog.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>The query string does not contain an expression.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>The query expression cannot end with 'FollowEdge'.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>Expecting 'VisitNode'.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>Expecting a string.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>Expecting 'StartFrom'.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>Expecting 1 or 2 arguments.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>Expecting a cell id.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>The query string contains too many expressions.</td>\r\n</tr>\r\n<tr>\r\n<td>BadArgument</td><td>The query string contains too many statements.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n",
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "The input is not a valid Json object."
                }
              }
            }
          },
          "413": {
            "description": "The request entity is too large (Size threshold is 1MB).",
            "examples": {
              "application/json": {
                "error": {
                  "code": "RequestTooLarge",
                  "message": "Request entity is too large"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Internal server error."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    }
  }
}