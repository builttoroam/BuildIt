// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices
{
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WebLanguageModelAPI.
    /// </summary>
    public static partial class WebLanguageModelAPIExtensions
    {
            /// <summary>
            /// Calculate the conditional probability that a particular word will follow a
            /// given sequence of words.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Which model to use, supported value: title/anchor/query/body
            /// </param>
            /// <param name='order'>
            /// The order of N-gram. If not specified, use default value 5 .Supported
            /// value: 1, 2, 3, 4, 5.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void CalculateConditionalProbability(this IWebLanguageModelAPI operations, string model, double? order = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebLanguageModelAPI)s).CalculateConditionalProbabilityAsync(model, order, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculate the conditional probability that a particular word will follow a
            /// given sequence of words.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Which model to use, supported value: title/anchor/query/body
            /// </param>
            /// <param name='order'>
            /// The order of N-gram. If not specified, use default value 5 .Supported
            /// value: 1, 2, 3, 4, 5.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task CalculateConditionalProbabilityAsync(this IWebLanguageModelAPI operations, string model, double? order = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.CalculateConditionalProbabilityWithHttpMessagesAsync(model, order, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Calculate the joint probability that a particular sequence of words will
            /// appear together.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Which model to use, supported value: title/anchor/query/body
            /// </param>
            /// <param name='order'>
            /// The order of N-gram. If not specified, use default value 5 .Supported
            /// value: 1, 2, 3, 4, 5.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void CalculateJointProbability(this IWebLanguageModelAPI operations, string model, double? order = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebLanguageModelAPI)s).CalculateJointProbabilityAsync(model, order, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculate the joint probability that a particular sequence of words will
            /// appear together.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Which model to use, supported value: title/anchor/query/body
            /// </param>
            /// <param name='order'>
            /// The order of N-gram. If not specified, use default value 5 .Supported
            /// value: 1, 2, 3, 4, 5.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task CalculateJointProbabilityAsync(this IWebLanguageModelAPI operations, string model, double? order = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.CalculateJointProbabilityWithHttpMessagesAsync(model, order, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the list of words (completions) most likely to follow a given sequence
            /// of words.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Which model to use, supported value: title/anchor/query/body
            /// </param>
            /// <param name='words'>
            /// A string containing a sequence of words from which to generate the list of
            /// words likely to follow. The words should be separated by spaces.
            /// </param>
            /// <param name='order'>
            /// The order of N-gram. If not specified, use default value 5 .Supported
            /// value: 1, 2, 3, 4, 5.
            /// </param>
            /// <param name='maxNumOfCandidatesReturned'>
            /// Max number of candidates would be returned. If not specified, use default
            /// value 5.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void GenerateNextWords(this IWebLanguageModelAPI operations, string model, string words, double? order = default(double?), double? maxNumOfCandidatesReturned = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebLanguageModelAPI)s).GenerateNextWordsAsync(model, words, order, maxNumOfCandidatesReturned, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of words (completions) most likely to follow a given sequence
            /// of words.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Which model to use, supported value: title/anchor/query/body
            /// </param>
            /// <param name='words'>
            /// A string containing a sequence of words from which to generate the list of
            /// words likely to follow. The words should be separated by spaces.
            /// </param>
            /// <param name='order'>
            /// The order of N-gram. If not specified, use default value 5 .Supported
            /// value: 1, 2, 3, 4, 5.
            /// </param>
            /// <param name='maxNumOfCandidatesReturned'>
            /// Max number of candidates would be returned. If not specified, use default
            /// value 5.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task GenerateNextWordsAsync(this IWebLanguageModelAPI operations, string model, string words, double? order = default(double?), double? maxNumOfCandidatesReturned = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.GenerateNextWordsWithHttpMessagesAsync(model, words, order, maxNumOfCandidatesReturned, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Insert spaces into a string of words lacking spaces, like a hashtag or
            /// part of a URL. Punctuation or exotic characters can prevent a string from
            /// being broken, so it’s best to limit input strings to lower-case,
            /// alpha-numeric characters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Which model to use, supported value: title/anchor/query/body
            /// </param>
            /// <param name='text'>
            /// The line of text to break into words. If spaces are present, they will be
            /// interpreted as hard breaks and maintained, except for leading or trailing
            /// spaces, which will be trimmed.
            /// </param>
            /// <param name='order'>
            /// The order of N-gram. If not specified, use default value 5 .Supported
            /// value: 1, 2, 3, 4, 5.
            /// </param>
            /// <param name='maxNumOfCandidatesReturned'>
            /// Max number of candidates would be returned. If not specified, use default
            /// value 5.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void BreakIntoWords(this IWebLanguageModelAPI operations, string model, string text, double? order = default(double?), double? maxNumOfCandidatesReturned = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebLanguageModelAPI)s).BreakIntoWordsAsync(model, text, order, maxNumOfCandidatesReturned, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Insert spaces into a string of words lacking spaces, like a hashtag or
            /// part of a URL. Punctuation or exotic characters can prevent a string from
            /// being broken, so it’s best to limit input strings to lower-case,
            /// alpha-numeric characters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Which model to use, supported value: title/anchor/query/body
            /// </param>
            /// <param name='text'>
            /// The line of text to break into words. If spaces are present, they will be
            /// interpreted as hard breaks and maintained, except for leading or trailing
            /// spaces, which will be trimmed.
            /// </param>
            /// <param name='order'>
            /// The order of N-gram. If not specified, use default value 5 .Supported
            /// value: 1, 2, 3, 4, 5.
            /// </param>
            /// <param name='maxNumOfCandidatesReturned'>
            /// Max number of candidates would be returned. If not specified, use default
            /// value 5.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BreakIntoWordsAsync(this IWebLanguageModelAPI operations, string model, string text, double? order = default(double?), double? maxNumOfCandidatesReturned = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BreakIntoWordsWithHttpMessagesAsync(model, text, order, maxNumOfCandidatesReturned, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// List models available currently.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void ListAvailableModels(this IWebLanguageModelAPI operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebLanguageModelAPI)s).ListAvailableModelsAsync(subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List models available currently.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ListAvailableModelsAsync(this IWebLanguageModelAPI operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ListAvailableModelsWithHttpMessagesAsync(subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
