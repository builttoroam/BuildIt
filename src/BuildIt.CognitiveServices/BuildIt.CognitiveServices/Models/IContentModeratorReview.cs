// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices
{

    /// <summary>
    /// Use this API to create reviews in Content Moderator. Before you can
    /// create reviews you will need a moderation Team. If you don't already
    /// have one Sign Up here:
    /// https://contentmoderator.cognitive.microsoft.com
    /// 
    /// You will need to use your Content Moderator review team credentials to
    /// generate Authentication Tokens that need to be passed in the
    /// Authorization header in addition to your Content Moderator
    /// subscription key.
    /// 
    /// To use the Test Console you must include the following header:
    /// 
    /// Header name: authorization
    /// Header value: Bearer -Your access token-
    /// 
    /// </summary>
    public partial interface IContentModeratorReview : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }


            /// <summary>
        /// A job Id will be returned for the Image content posted on this
        /// endpoint.
        /// 
        /// Once the content is evaluated against the Workflow provided the
        /// review will be created or ignored based on the workflow
        /// expression.
        /// 
        /// &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
        /// 
        /// {&lt;br/&gt;
        /// "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
        /// "ReviewId": "&lt;Review Id, if the Job resulted in a Review to
        /// be created&gt;",&lt;br/&gt;
        /// "WorkFlowId": "default",&lt;br/&gt;
        /// "Status": "&lt;This will be one of Complete, InProgress,
        /// Error&gt;",&lt;br/&gt;
        /// "ContentType": "Image",&lt;br/&gt;
        /// "ContentId": "&lt;This is the ContentId that was specified on
        /// input&gt;",&lt;br/&gt;
        /// "CallBackType": "Job",&lt;br/&gt;
        /// "Metadata": {&lt;br/&gt;
        /// "adultscore": "0.xxx",&lt;br/&gt;
        /// "a": "False",&lt;br/&gt;
        /// "racyscore": "0.xxx",&lt;br/&gt;
        /// "r": "True"&lt;br/&gt;
        /// }&lt;br/&gt;
        /// }&lt;br/&gt;
        /// 
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
        /// 
        /// {
        /// "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
        /// "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
        /// "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
        /// "CallBackType": "Review",&lt;br/&gt;
        /// "ContentId": "&lt;The ContentId that was specified
        /// input&gt;",&lt;br/&gt;
        /// "Metadata": {&lt;br/&gt;
        /// "adultscore": "0.xxx",
        /// "a": "False",&lt;br/&gt;
        /// "racyscore": "0.xxx",&lt;br/&gt;
        /// "r": "True"&lt;br/&gt;
        /// },&lt;br/&gt;
        /// "ReviewerResultTags": {&lt;br/&gt;
        /// "a": "False",&lt;br/&gt;
        /// "r": "True"&lt;br/&gt;
        /// }&lt;br/&gt;
        /// }&lt;br/&gt;
        /// 
        /// &lt;/p&gt;
        /// </summary>
        /// <param name='teamName'>
        /// Your team name
        /// </param>
        /// <param name='contentId'>
        /// Content Id/Name
        /// </param>
        /// <param name='workflowName'>
        /// Workflow Name, if left empty your teams default workflow would be
        /// used
        /// </param>
        /// <param name='callBackEndpoint'>
        /// Callback endpoint for posting the reviews result.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> JobCreateWithHttpMessagesAsync(string teamName, string contentId, string workflowName, string callBackEndpoint = default(string), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Job Details for a Job Id.
        /// </summary>
        /// <param name='teamName'>
        /// </param>
        /// <param name='jobId'>
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> JobGetWithHttpMessagesAsync(string teamName, string jobId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The reviews created would show up for Reviewers on your team. As
        /// Reviewers complete reviewing, results of the Review would be
        /// POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.
        /// 
        /// &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
        /// &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
        /// &lt;p&gt;
        /// {&lt;br/&gt;
        /// "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
        /// "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
        /// "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
        /// "CallBackType": "Review",&lt;br/&gt;
        /// "ContentId": "&lt;The ContentId that was specified
        /// input&gt;",&lt;br/&gt;
        /// "Metadata": {&lt;br/&gt;
        /// "adultscore": "0.xxx",&lt;br/&gt;
        /// "a": "False",&lt;br/&gt;
        /// "racyscore": "0.xxx",&lt;br/&gt;
        /// "r": "True"&lt;br/&gt;
        /// },&lt;br/&gt;
        /// "ReviewerResultTags": {&lt;br/&gt;
        /// "a": "False",&lt;br/&gt;
        /// "r": "True"&lt;br/&gt;
        /// }&lt;br/&gt;
        /// }&lt;br/&gt;
        /// 
        /// &lt;/p&gt;
        /// </summary>
        /// <param name='teamName'>
        /// Your Team Name
        /// </param>
        /// <param name='subTeam'>
        /// Optional paramter used to specify the Sub Team for this review
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> ReviewCreateWithHttpMessagesAsync(string teamName, string subTeam = default(string), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns review details for the review Id passed.
        /// </summary>
        /// <param name='teamName'>
        /// </param>
        /// <param name='reviewId'>
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> ReviewGetWithHttpMessagesAsync(string teamName, string reviewId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new workflow or update an existing one.
        /// </summary>
        /// <param name='team'>
        /// Your Team name
        /// </param>
        /// <param name='workflowname'>
        /// Provide a name for this workflow
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> WorkflowCreateOrUpdateWithHttpMessagesAsync(string team, string workflowname, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the details of a specific Workflow on your Team
        /// </summary>
        /// <param name='team'>
        /// Your Team name
        /// </param>
        /// <param name='workflowname'>
        /// Provide a name for this workflow
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> WorkflowGetWithHttpMessagesAsync(string team, string workflowname, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the Workflows available for you Team
        /// </summary>
        /// <param name='team'>
        /// Your Team name
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> WorkflowGetAllWithHttpMessagesAsync(string team, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}
