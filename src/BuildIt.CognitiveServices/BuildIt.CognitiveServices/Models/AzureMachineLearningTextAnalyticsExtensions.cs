// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for AzureMachineLearningTextAnalytics.
    /// </summary>
    public static partial class AzureMachineLearningTextAnalyticsExtensions
    {
            /// <summary>
            /// The API returns a list of strings denoting the key talking points in the
            /// input text.
            /// We employ techniques from Microsoft Office's sophisticated
            /// Natural Language Processing toolkit.
            /// Currently, the following languages are supported: English,
            /// German, Spanish and Japanese.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='multiLanguageBatchInputV2'>
            /// </param>
            public static object KeyPhrases(this IAzureMachineLearningTextAnalytics operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), MultiLanguageBatchInputV2 multiLanguageBatchInputV2 = default(MultiLanguageBatchInputV2))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAzureMachineLearningTextAnalytics)s).KeyPhrasesAsync(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The API returns a list of strings denoting the key talking points in the
            /// input text.
            /// We employ techniques from Microsoft Office's sophisticated
            /// Natural Language Processing toolkit.
            /// Currently, the following languages are supported: English,
            /// German, Spanish and Japanese.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='multiLanguageBatchInputV2'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> KeyPhrasesAsync(this IAzureMachineLearningTextAnalytics operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), MultiLanguageBatchInputV2 multiLanguageBatchInputV2 = default(MultiLanguageBatchInputV2), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.KeyPhrasesWithHttpMessagesAsync(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The API returns the detected language and a numeric score between 0 and 1.
            /// 
            /// Scores close to 1 indicate 100% certainty that the identified
            /// language is true.
            /// A total of 120 languages are supported.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='numberOfLanguagesToDetect'>
            /// Format - int32. (Optional) Number of languages to detect. Set to 1 by
            /// default.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='batchInputV2'>
            /// </param>
            public static object DetectLanguage(this IAzureMachineLearningTextAnalytics operations, int? numberOfLanguagesToDetect = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), BatchInputV2 batchInputV2 = default(BatchInputV2))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAzureMachineLearningTextAnalytics)s).DetectLanguageAsync(numberOfLanguagesToDetect, subscriptionKey, ocpApimSubscriptionKey, batchInputV2), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The API returns the detected language and a numeric score between 0 and 1.
            /// 
            /// Scores close to 1 indicate 100% certainty that the identified
            /// language is true.
            /// A total of 120 languages are supported.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='numberOfLanguagesToDetect'>
            /// Format - int32. (Optional) Number of languages to detect. Set to 1 by
            /// default.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='batchInputV2'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DetectLanguageAsync(this IAzureMachineLearningTextAnalytics operations, int? numberOfLanguagesToDetect = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), BatchInputV2 batchInputV2 = default(BatchInputV2), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DetectLanguageWithHttpMessagesAsync(numberOfLanguagesToDetect, subscriptionKey, ocpApimSubscriptionKey, batchInputV2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the status of an operation submitted for processing. If the the
            /// operation has reached a 'Succeeded' state, will also return the result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// A unique id for the submitted operation.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static object OperationStatus(this IAzureMachineLearningTextAnalytics operations, string operationId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAzureMachineLearningTextAnalytics)s).OperationStatusAsync(operationId, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the status of an operation submitted for processing. If the the
            /// operation has reached a 'Succeeded' state, will also return the result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// A unique id for the submitted operation.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> OperationStatusAsync(this IAzureMachineLearningTextAnalytics operations, string operationId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.OperationStatusWithHttpMessagesAsync(operationId, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The API returns a numeric score between 0 and 1.
            /// Scores close to 1 indicate positive sentiment, while scores
            /// close to 0 indicate negative sentiment.
            /// Sentiment score is generated using classification techniques.
            /// The input features to the classifier include n-grams, features
            /// generated from part-of-speech tags, and word embeddings.
            /// Currently, the following languages are supported: English,
            /// Spanish, French, Portuguese.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='multiLanguageBatchInputV2'>
            /// </param>
            public static object Sentiment(this IAzureMachineLearningTextAnalytics operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), MultiLanguageBatchInputV2 multiLanguageBatchInputV2 = default(MultiLanguageBatchInputV2))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAzureMachineLearningTextAnalytics)s).SentimentAsync(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The API returns a numeric score between 0 and 1.
            /// Scores close to 1 indicate positive sentiment, while scores
            /// close to 0 indicate negative sentiment.
            /// Sentiment score is generated using classification techniques.
            /// The input features to the classifier include n-grams, features
            /// generated from part-of-speech tags, and word embeddings.
            /// Currently, the following languages are supported: English,
            /// Spanish, French, Portuguese.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='multiLanguageBatchInputV2'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> SentimentAsync(this IAzureMachineLearningTextAnalytics operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), MultiLanguageBatchInputV2 multiLanguageBatchInputV2 = default(MultiLanguageBatchInputV2), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SentimentWithHttpMessagesAsync(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The API returns the top detected topics for a list of submitted text
            /// documents.
            /// A topic is identified with a key phrase, which can be one or
            /// more related words.
            /// Use the URL parameters and stop word list to control which
            /// words or documents are filtered out.
            /// You can also supply a list of topics to exclude from the
            /// response.
            /// At least 100 text documents must be submitted, however it is
            /// designed to detect topics across hundreds to thousands of documents.
            /// Note that one transaction is charged per text document
            /// submitted.
            /// For best performance, limit each document to a short, human
            /// written text paragraph such as review, conversation or user feedback.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='minDocumentsPerWord'>
            /// Format - int32. (optional) Words that occur in less than this many
            /// documents are ignored.
            /// Use this parameter to help exclude rare document topics.
            /// Omit to let the service choose appropriate value.
            /// </param>
            /// <param name='maxDocumentsPerWord'>
            /// Format - int32. (optional) Words that occur in more than this many
            /// documents are ignored.
            /// Use this parameter to help exclude ubiquitous document topics.
            /// Omit to let the service choose appropriate value.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='topicDetectionInputV2'>
            /// </param>
            public static ErrorResponse DetectTopics(this IAzureMachineLearningTextAnalytics operations, int? minDocumentsPerWord = default(int?), int? maxDocumentsPerWord = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), TopicDetectionInputV2 topicDetectionInputV2 = default(TopicDetectionInputV2))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAzureMachineLearningTextAnalytics)s).DetectTopicsAsync(minDocumentsPerWord, maxDocumentsPerWord, subscriptionKey, ocpApimSubscriptionKey, topicDetectionInputV2), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The API returns the top detected topics for a list of submitted text
            /// documents.
            /// A topic is identified with a key phrase, which can be one or
            /// more related words.
            /// Use the URL parameters and stop word list to control which
            /// words or documents are filtered out.
            /// You can also supply a list of topics to exclude from the
            /// response.
            /// At least 100 text documents must be submitted, however it is
            /// designed to detect topics across hundreds to thousands of documents.
            /// Note that one transaction is charged per text document
            /// submitted.
            /// For best performance, limit each document to a short, human
            /// written text paragraph such as review, conversation or user feedback.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='minDocumentsPerWord'>
            /// Format - int32. (optional) Words that occur in less than this many
            /// documents are ignored.
            /// Use this parameter to help exclude rare document topics.
            /// Omit to let the service choose appropriate value.
            /// </param>
            /// <param name='maxDocumentsPerWord'>
            /// Format - int32. (optional) Words that occur in more than this many
            /// documents are ignored.
            /// Use this parameter to help exclude ubiquitous document topics.
            /// Omit to let the service choose appropriate value.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='topicDetectionInputV2'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ErrorResponse> DetectTopicsAsync(this IAzureMachineLearningTextAnalytics operations, int? minDocumentsPerWord = default(int?), int? maxDocumentsPerWord = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), TopicDetectionInputV2 topicDetectionInputV2 = default(TopicDetectionInputV2), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DetectTopicsWithHttpMessagesAsync(minDocumentsPerWord, maxDocumentsPerWord, subscriptionKey, ocpApimSubscriptionKey, topicDetectionInputV2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
