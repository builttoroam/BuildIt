// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices
{

    /// <summary>
    /// The Computer Vision API provides state-of-the-art algorithms to
    /// process images and return information.  For example, it can be used
    /// to determine if an image contains mature content, or it can be used
    /// to find all the faces in an image.  It also has other features like
    /// estimating dominant and accent colors, categorizing the content of
    /// images, and describing an image with complete English sentences.
    /// Additionally, it can also intelligently generate images thumbnails
    /// for displaying large images effectively.
    /// </summary>
    public partial interface IComputerVisionAPIV10 : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }


            /// <summary>
        /// This operation extracts a rich set of visual features based on the
        /// image content.
        /// &lt;br&gt;
        /// &lt;br&gt;
        /// Two input methods are supported -- (1) Uploading an image
        /// or (2) specifying an image URL.  Within your request, there is an
        /// optional parameter to allow you to choose which features to
        /// return.  By default, image categories are returned in the
        /// response.
        /// &lt;br&gt;
        /// &lt;br&gt;
        /// A successful response will be returned in JSON.  If the
        /// request failed, the response will contain an error code and a
        /// message to help understand what went wrong.
        /// 
        /// &lt;h4&gt;Http Method&lt;/h4&gt;
        /// POST
        /// </summary>
        /// <param name='visualFeatures'>
        /// A string indicating what visual feature types to return. Multiple
        /// values should be comma-separated.
        /// &lt;br/&gt;Valid visual feature types include:
        /// &lt;br/&gt;
        /// &lt;ul&gt;
        /// &lt;li&gt;&lt;b&gt;Categories&lt;/b&gt; - categorizes image
        /// content according to a taxonomy defined in documentation.
        /// &lt;/li&gt;
        /// &lt;li&gt;&lt;b&gt;Tags&lt;/b&gt; - tags the image with a detailed
        /// list of words related to the image content. &lt;/li&gt;
        /// &lt;li&gt;&lt;b&gt;Description&lt;/b&gt; - describes the image
        /// content with a complete English sentence. &lt;/li&gt;
        /// &lt;li&gt;&lt;b&gt;Faces&lt;/b&gt; - detects if faces are present.
        /// If present, generate coordinates, gender and age.&lt;/li&gt;
        /// &lt;li&gt;&lt;b &gt;ImageType&lt;/b&gt; - detects if image is
        /// clipart or a line drawing.&lt;/li&gt;
        /// &lt;li&gt;&lt;b&gt; Color&lt;/b&gt; - determines the accent color,
        /// dominant color, and whether an image is
        /// black&amp;white.&lt;/li&gt;
        /// &lt;li&gt;&lt;b&gt;Adult&lt;/b&gt; - detects if the image is
        /// pornographic in nature (depicts nudity or a sex act).  Sexually
        /// suggestive content is also detected.&lt;/li&gt;
        /// &lt;/ul&gt;. Possible values include: 'ImageType', 'Faces',
        /// 'Adult', 'Categories', 'Color', 'Tags', 'Description'
        /// </param>
        /// <param name='details'>
        /// A string indicating which domain-specific details to return.
        /// Multiple values should be comma-separated.
        /// &lt;br/&gt;Valid visual feature types include:
        /// &lt;br/&gt;
        /// &lt;ul&gt;
        /// &lt;li&gt;&lt;b &gt;Celebrities&lt;/b&gt; - identifies celebrities
        /// if detected in the image.&lt;/li&gt;
        /// &lt;/ul&gt;
        /// . Possible values include: 'Celebrities'
        /// </param>
        /// <param name='language'>
        /// A string indicating which language to return. The service will
        /// return recognition results in specified language. If this
        /// parameter is not specified, the default value is
        /// &amp;quot;en&amp;quot;.&lt;br /&gt;
        /// Supported languages:
        /// &lt;ul&gt;
        /// &lt;li&gt;&lt;b &gt;en&lt;/b&gt; - English, Default.&lt;/li&gt;
        /// &lt;li&gt;&lt;b &gt;zh&lt;/b&gt; - Simplified Chinese.&lt;/li&gt;
        /// &lt;/ul&gt;. Possible values include: 'en', 'zh'
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> AnalyzeImageWithHttpMessagesAsync(string visualFeatures = "Categories", string details = default(string), string language = "en", string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation generates a thumbnail image with the user-specified
        /// width and height.  By default, the service analyzes the image,
        /// identifies the region of interest (ROI), and generates smart
        /// cropping coordinates based on the ROI.  Smart cropping helps when
        /// you specify an aspect ratio that differs from that of the input
        /// image
        /// &lt;p/&gt;
        /// A successful response contains the thumbnail image binary.  If the
        /// request failed, the response contains an error code and a message
        /// to help determine what went wrong.
        /// 
        /// &lt;p/&gt;
        /// Upon failure, the error code and an error message are returned.
        /// The error code could be one of InvalidImageUrl,
        /// InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize,
        /// NotSupportedImage, FailedToProcess, Timeout, or
        /// InternalServerError.
        /// 
        /// &lt;h4&gt;Http Method&lt;/h4&gt;
        /// POST
        /// </summary>
        /// <param name='width'>
        /// Width of the thumbnail.  It must be between 1 and 1024.
        /// Recommended minimum of 50.
        /// </param>
        /// <param name='height'>
        /// Height of the thumbnail. It must be between 1 and 1024.
        /// Recommended minimum of 50.
        /// </param>
        /// <param name='smartCropping'>
        /// Boolean flag for enabling smart cropping.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> GetThumbnailWithHttpMessagesAsync(double width, double height, bool? smartCropping = true, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Optical Character Recognition (OCR) detects text in an image and
        /// extracts the recognized characters into a machine-usable
        /// character stream.
        /// 
        /// &lt;p/&gt;
        /// Upon success, the OCR results will be returned.
        /// &lt;p/&gt;
        /// Upon failure, the error code together with an error message will
        /// be returned. The error code can be one of InvalidImageUrl,
        /// InvalidImageFormat, InvalidImageSize, NotSupportedImage,
        /// NotSupportedLanguage, or InternalServerError.
        /// 
        /// &lt;h4&gt;Http Method&lt;/h4&gt;
        /// POST
        /// </summary>
        /// <param name='language'>
        /// The BCP-47 language code of the text to be detected in the
        /// image.The default value is &amp;quot;unk&amp;quot;, then the
        /// service will auto detect the language of the text in the
        /// image.&lt;br /&gt;
        /// &lt;br /&gt;
        /// Supported languages:
        /// &lt;ul
        /// style="margin-left:.375in;direction:ltr;unicode-bidi:embed;
        /// margin-top:0in;margin-bottom:0in" type="disc"&gt;
        /// &lt;li&gt;unk (AutoDetect)&lt;/li&gt;
        /// &lt;li&gt;zh-Hans (ChineseSimplified)&lt;/li&gt;
        /// &lt;li&gt;zh-Hant (ChineseTraditional)&lt;/li&gt;
        /// &lt;li&gt;cs (Czech)&lt;/li&gt;
        /// &lt;li&gt;da (Danish)&lt;/li&gt;
        /// &lt;li&gt;nl (Dutch)&lt;/li&gt;
        /// &lt;li&gt;en (English)&lt;/li&gt;
        /// &lt;li&gt;fi (Finnish)&lt;/li&gt;
        /// &lt;li&gt;fr (French)&lt;/li&gt;
        /// &lt;li&gt;de (German)&lt;/li&gt;
        /// &lt;li&gt;el (Greek)&lt;/li&gt;
        /// &lt;li&gt;hu (Hungarian)&lt;/li&gt;
        /// &lt;li&gt;it (Italian)&lt;/li&gt;
        /// &lt;li&gt;Ja (Japanese)&lt;/li&gt;
        /// &lt;li&gt;ko (Korean)&lt;/li&gt;
        /// &lt;li&gt;nb (Norwegian)&lt;/li&gt;
        /// &lt;li&gt;pl (Polish)&lt;/li&gt;
        /// &lt;li&gt;pt (Portuguese,&lt;/li&gt;
        /// &lt;li&gt;ru (Russian)&lt;/li&gt;
        /// &lt;li&gt;es (Spanish)&lt;/li&gt;
        /// &lt;li&gt;sv (Swedish)&lt;/li&gt;
        /// &lt;li&gt;tr (Turkish)&lt;/li&gt;
        /// &lt;/ul&gt;. Possible values include: 'unk', 'zh-Hans', '
        /// zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de', 'el', 'hu',
        /// 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr'
        /// </param>
        /// <param name='detectOrientation'>
        /// Whether detect the text orientation in the image. With
        /// detectOrientation=true the OCR service tries to detect the image
        /// orientation and correct it before further processing (e.g. if
        /// it's upside-down).
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> OCRWithHttpMessagesAsync(string language = "unk", bool? detectOrientation = true, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation returns the list of domain-specific models that are
        /// supported by the Computer Vision API.  Currently, the API only
        /// supports one domain-specific model: a celebrity recognizer.
        /// &lt;br&gt;
        /// &lt;br&gt;
        /// A successful response will be returned in JSON.  If the
        /// request failed, the response will contain an error code and a
        /// message to help understand what went wrong.
        /// 
        /// &lt;h4&gt;Http Method&lt;/h4&gt;
        /// GET
        /// </summary>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> ListDomainSpecificModelsWithHttpMessagesAsync(string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation generates a description of an image in human
        /// readable language with complete sentences.  The description is
        /// based on a collection of content tags, which are also returned by
        /// the operation. More than one description can be generated for
        /// each image.  Descriptions are ordered by their confidence score.
        /// All descriptions are in English.
        /// &lt;br&gt;
        /// &lt;br&gt;
        /// Two input methods are supported -- (1) Uploading an image
        /// or (2) specifying an image URL.
        /// &lt;br&gt;
        /// &lt;br&gt;
        /// A successful response will be returned in JSON.  If the
        /// request failed, the response will contain an error code and a
        /// message to help understand what went wrong.
        /// 
        /// &lt;h4&gt;Http Method&lt;/h4&gt;
        /// POST
        /// </summary>
        /// <param name='maxCandidates'>
        /// Maximum number of candidate descriptions to be returned.  The
        /// default is 1. Possible values include: '1'
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> DescribeImageWithHttpMessagesAsync(string maxCandidates = "1", string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation generates a list of words, or tags, that are
        /// relevant to the content of the supplied image. The Computer
        /// Vision API can return tags based on objects, living beings,
        /// scenery or actions found in images. Unlike categories, tags are
        /// not organized according to a hierarchical classification system,
        /// but correspond to image content. Tags may contain hints to avoid
        /// ambiguity or provide context, for example the tag “cello” may be
        /// accompanied by the hint “musical instrument”. All tags are in
        /// English.
        /// &lt;br&gt;
        /// &lt;br&gt;
        /// Two input methods are supported -- (1) Uploading an image
        /// or (2) specifying an image URL.
        /// &lt;br&gt;
        /// &lt;br&gt;
        /// A successful response will be returned in JSON.  If the
        /// request failed, the response will contain an error code and a
        /// message to help understand what went wrong.
        /// 
        /// &lt;h4&gt;Http Method&lt;/h4&gt;
        /// POST
        /// </summary>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> TagImageWithHttpMessagesAsync(string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation recognizes content within an image by applying a
        /// domain-specific model.  The list of domain-specific models that
        /// are supported by the Computer Vision API can be retrieved using
        /// the /models GET request.  Currently, the API only provides a
        /// single domain-specific model: celebrities.
        /// &lt;br&gt;
        /// &lt;br&gt;
        /// Two input methods are supported -- (1) Uploading an image
        /// or (2) specifying an image URL.
        /// &lt;br&gt;
        /// &lt;br&gt;
        /// A successful response will be returned in JSON.  If the
        /// request failed, the response will contain an error code and a
        /// message to help understand what went wrong.
        /// 
        /// &lt;h4&gt;Http Method&lt;/h4&gt;
        /// POST
        /// </summary>
        /// <param name='model'>
        /// The domain-specific content to recognize.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> RecognizeDomainSpecificContentWithHttpMessagesAsync(string model, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}
