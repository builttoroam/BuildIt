// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices
{
    using Models;

    /// <summary>
    /// The Text Analytics API is a suite of text analytics web services built
    /// with Azure Machine Learning.
    /// The API can be used to analyze unstructured text for tasks such as
    /// sentiment analysis, key phrase extraction and language detection.
    /// No training data is needed to use this API; just bring your text data.
    /// 
    /// This API uses advanced natural language processing techniques to
    /// deliver best in class predictions.
    /// 
    /// Further documentation can be found in
    /// https://azure.microsoft.com/en-us/documentation/articles/machine-learning-apps-text-analytics/
    /// </summary>
    public partial interface IAzureMachineLearningTextAnalytics : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }


            /// <summary>
        /// The API returns a list of strings denoting the key talking points
        /// in the input text.
        /// We employ techniques from Microsoft Office's
        /// sophisticated Natural Language Processing toolkit.
        /// Currently, the following languages are supported:
        /// English, German, Spanish and Japanese.
        /// </summary>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='multiLanguageBatchInputV2'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> KeyPhrasesWithHttpMessagesAsync(string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), MultiLanguageBatchInputV2 multiLanguageBatchInputV2 = default(MultiLanguageBatchInputV2), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The API returns the detected language and a numeric score between
        /// 0 and 1.
        /// Scores close to 1 indicate 100% certainty that the
        /// identified language is true.
        /// A total of 120 languages are supported.
        /// </summary>
        /// <param name='numberOfLanguagesToDetect'>
        /// Format - int32. (Optional) Number of languages to detect. Set to 1
        /// by default.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='batchInputV2'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> DetectLanguageWithHttpMessagesAsync(int? numberOfLanguagesToDetect = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), BatchInputV2 batchInputV2 = default(BatchInputV2), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the status of an operation submitted for processing. If the
        /// the operation has reached a 'Succeeded' state, will also return
        /// the result.
        /// </summary>
        /// <param name='operationId'>
        /// A unique id for the submitted operation.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> OperationStatusWithHttpMessagesAsync(string operationId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The API returns a numeric score between 0 and 1.
        /// Scores close to 1 indicate positive sentiment, while
        /// scores close to 0 indicate negative sentiment.
        /// Sentiment score is generated using classification
        /// techniques.
        /// The input features to the classifier include n-grams,
        /// features generated from part-of-speech tags, and word embeddings.
        /// 
        /// Currently, the following languages are supported:
        /// English, Spanish, French, Portuguese.
        /// </summary>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='multiLanguageBatchInputV2'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> SentimentWithHttpMessagesAsync(string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), MultiLanguageBatchInputV2 multiLanguageBatchInputV2 = default(MultiLanguageBatchInputV2), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The API returns the top detected topics for a list of submitted
        /// text documents.
        /// A topic is identified with a key phrase, which can be
        /// one or more related words.
        /// Use the URL parameters and stop word list to control
        /// which words or documents are filtered out.
        /// You can also supply a list of topics to exclude from
        /// the response.
        /// At least 100 text documents must be submitted, however
        /// it is designed to detect topics across hundreds to thousands of
        /// documents.
        /// Note that one transaction is charged per text document
        /// submitted.
        /// For best performance, limit each document to a short,
        /// human written text paragraph such as review, conversation or user
        /// feedback.
        /// </summary>
        /// <param name='minDocumentsPerWord'>
        /// Format - int32. (optional) Words that occur in less than this many
        /// documents are ignored.
        /// Use this parameter to help exclude rare document
        /// topics.
        /// Omit to let the service choose appropriate value.
        /// </param>
        /// <param name='maxDocumentsPerWord'>
        /// Format - int32. (optional) Words that occur in more than this many
        /// documents are ignored.
        /// Use this parameter to help exclude ubiquitous document
        /// topics.
        /// Omit to let the service choose appropriate value.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='topicDetectionInputV2'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse,DetectTopicsHeaders>> DetectTopicsWithHttpMessagesAsync(int? minDocumentsPerWord = default(int?), int? maxDocumentsPerWord = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), TopicDetectionInputV2 topicDetectionInputV2 = default(TopicDetectionInputV2), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}
