// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices.Models
{
    using System.Linq;

    public partial class RankingBuildParameters
    {
        /// <summary>
        /// Initializes a new instance of the RankingBuildParameters class.
        /// </summary>
        public RankingBuildParameters() { }

        /// <summary>
        /// Initializes a new instance of the RankingBuildParameters class.
        /// </summary>
        /// <param name="numberOfModelIterations">The number of iterations the
        /// model performs.
        /// The higher the number, the better accuracy, but
        /// compute time will be higher.</param>
        /// <param name="numberOfModelDimensions">The number of dimensions
        /// relates to the number of 'features' the model will try to find
        /// within your data.
        /// Increasing the number of dimensions will allow better
        /// fine-tuning of the results into smaller clusters.
        /// However, too many dimensions will prevent the model
        /// from finding correlations between items.</param>
        /// <param name="itemCutOffLowerBound">Defines the item lower bound
        /// for usage condenser.</param>
        /// <param name="itemCutOffUpperBound">Defines the item upper bound
        /// for usage condenser.</param>
        /// <param name="userCutOffLowerBound">Defines the user lower bound
        /// for usage condenser.</param>
        /// <param name="userCutOffUpperBound">Defines the user upper bound
        /// for usage condenser.</param>
        public RankingBuildParameters(int? numberOfModelIterations = default(int?), int? numberOfModelDimensions = default(int?), int? itemCutOffLowerBound = default(int?), int? itemCutOffUpperBound = default(int?), int? userCutOffLowerBound = default(int?), int? userCutOffUpperBound = default(int?))
        {
            NumberOfModelIterations = numberOfModelIterations;
            NumberOfModelDimensions = numberOfModelDimensions;
            ItemCutOffLowerBound = itemCutOffLowerBound;
            ItemCutOffUpperBound = itemCutOffUpperBound;
            UserCutOffLowerBound = userCutOffLowerBound;
            UserCutOffUpperBound = userCutOffUpperBound;
        }

        /// <summary>
        /// Gets or sets the number of iterations the model performs.
        /// The higher the number, the better accuracy, but
        /// compute time will be higher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfModelIterations")]
        public int? NumberOfModelIterations { get; set; }

        /// <summary>
        /// Gets or sets the number of dimensions relates to the number of
        /// 'features' the model will try to find within your data.
        /// Increasing the number of dimensions will allow better
        /// fine-tuning of the results into smaller clusters.
        /// However, too many dimensions will prevent the model
        /// from finding correlations between items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfModelDimensions")]
        public int? NumberOfModelDimensions { get; set; }

        /// <summary>
        /// Gets or sets defines the item lower bound for usage condenser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "itemCutOffLowerBound")]
        public int? ItemCutOffLowerBound { get; set; }

        /// <summary>
        /// Gets or sets defines the item upper bound for usage condenser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "itemCutOffUpperBound")]
        public int? ItemCutOffUpperBound { get; set; }

        /// <summary>
        /// Gets or sets defines the user lower bound for usage condenser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userCutOffLowerBound")]
        public int? UserCutOffLowerBound { get; set; }

        /// <summary>
        /// Gets or sets defines the user upper bound for usage condenser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userCutOffUpperBound")]
        public int? UserCutOffUpperBound { get; set; }

    }
}
