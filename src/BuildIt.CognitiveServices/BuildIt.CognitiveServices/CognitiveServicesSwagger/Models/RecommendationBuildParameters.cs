// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices.Models
{
    using System.Linq;

    public partial class RecommendationBuildParameters
    {
        /// <summary>
        /// Initializes a new instance of the RecommendationBuildParameters
        /// class.
        /// </summary>
        public RecommendationBuildParameters() { }

        /// <summary>
        /// Initializes a new instance of the RecommendationBuildParameters
        /// class.
        /// </summary>
        /// <param name="numberOfModelIterations">The number of iterations the
        /// model performs.
        /// The higher the number, the better accuracy, but
        /// compute time will be higher.</param>
        /// <param name="numberOfModelDimensions">The number of dimensions
        /// relates to the number of 'features' the model will try to find
        /// within your data.
        /// Increasing the number of dimensions will allow better
        /// fine-tuning of the results into smaller clusters.
        /// However, too many dimensions will prevent the model
        /// from finding correlations between items.</param>
        /// <param name="itemCutOffLowerBound">Defines the item lower bound
        /// for usage condenser.</param>
        /// <param name="itemCutOffUpperBound">Defines the item upper bound
        /// for usage condenser.</param>
        /// <param name="userCutOffLowerBound">Defines the user lower bound
        /// for usage condenser.</param>
        /// <param name="userCutOffUpperBound">Defines the user upper bound
        /// for usage condenser.</param>
        /// <param name="enableModelingInsights">Enable or disable metrics
        /// computation for the model.</param>
        /// <param name="splitterStrategy">Defines the splitter strategy to be
        /// used by the build.
        /// RandomSplitter splits the usage data in train and test
        /// sets based on the given
        /// randomSplitterParameters value.
        /// LastEventSplitter splits the usage data in train and
        /// test sets based on the last
        /// transaction for a each user.</param>
        /// <param name="randomSplitterParameters">Specifies the parameters to
        /// be used for random splitter.</param>
        /// <param name="dateSplitterParameters">Specifies the parameters to
        /// be used for date splitter.</param>
        /// <param name="popularItemBenchmarkWindow">Specifies the parameters
        /// to be used for computing popular items for modeling insights. (in
        /// number of days)</param>
        /// <param name="useFeaturesInModel">Indicates if features can be used
        /// in order to enhance the recommendation model.</param>
        /// <param name="modelingFeatureList">Comma-separated list of feature
        /// names to be used during build.</param>
        /// <param name="allowColdItemPlacement">Indicates if the
        /// recommendation should also push cold items via feature
        /// similarity.</param>
        /// <param name="enableFeatureCorrelation">Indicates if features can
        /// be used in reasoning.</param>
        /// <param name="reasoningFeatureList">Comma-separated list of feature
        /// names to be used for reasoning sentences (e.g. recommendation
        /// explanations).</param>
        /// <param name="enableU2I">Allow the personalized recommendation
        /// a.k.a. U2I (user to item recommendations).</param>
        public RecommendationBuildParameters(int? numberOfModelIterations = default(int?), int? numberOfModelDimensions = default(int?), int? itemCutOffLowerBound = default(int?), int? itemCutOffUpperBound = default(int?), int? userCutOffLowerBound = default(int?), int? userCutOffUpperBound = default(int?), bool? enableModelingInsights = default(bool?), string splitterStrategy = default(string), RandomSplitterParameters randomSplitterParameters = default(RandomSplitterParameters), DateSplitterParameters dateSplitterParameters = default(DateSplitterParameters), int? popularItemBenchmarkWindow = default(int?), bool? useFeaturesInModel = default(bool?), string modelingFeatureList = default(string), bool? allowColdItemPlacement = default(bool?), bool? enableFeatureCorrelation = default(bool?), string reasoningFeatureList = default(string), bool? enableU2I = default(bool?))
        {
            NumberOfModelIterations = numberOfModelIterations;
            NumberOfModelDimensions = numberOfModelDimensions;
            ItemCutOffLowerBound = itemCutOffLowerBound;
            ItemCutOffUpperBound = itemCutOffUpperBound;
            UserCutOffLowerBound = userCutOffLowerBound;
            UserCutOffUpperBound = userCutOffUpperBound;
            EnableModelingInsights = enableModelingInsights;
            SplitterStrategy = splitterStrategy;
            RandomSplitterParameters = randomSplitterParameters;
            DateSplitterParameters = dateSplitterParameters;
            PopularItemBenchmarkWindow = popularItemBenchmarkWindow;
            UseFeaturesInModel = useFeaturesInModel;
            ModelingFeatureList = modelingFeatureList;
            AllowColdItemPlacement = allowColdItemPlacement;
            EnableFeatureCorrelation = enableFeatureCorrelation;
            ReasoningFeatureList = reasoningFeatureList;
            EnableU2I = enableU2I;
        }

        /// <summary>
        /// Gets or sets the number of iterations the model performs.
        /// The higher the number, the better accuracy, but
        /// compute time will be higher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfModelIterations")]
        public int? NumberOfModelIterations { get; set; }

        /// <summary>
        /// Gets or sets the number of dimensions relates to the number of
        /// 'features' the model will try to find within your data.
        /// Increasing the number of dimensions will allow better
        /// fine-tuning of the results into smaller clusters.
        /// However, too many dimensions will prevent the model
        /// from finding correlations between items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfModelDimensions")]
        public int? NumberOfModelDimensions { get; set; }

        /// <summary>
        /// Gets or sets defines the item lower bound for usage condenser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "itemCutOffLowerBound")]
        public int? ItemCutOffLowerBound { get; set; }

        /// <summary>
        /// Gets or sets defines the item upper bound for usage condenser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "itemCutOffUpperBound")]
        public int? ItemCutOffUpperBound { get; set; }

        /// <summary>
        /// Gets or sets defines the user lower bound for usage condenser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userCutOffLowerBound")]
        public int? UserCutOffLowerBound { get; set; }

        /// <summary>
        /// Gets or sets defines the user upper bound for usage condenser.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userCutOffUpperBound")]
        public int? UserCutOffUpperBound { get; set; }

        /// <summary>
        /// Gets or sets enable or disable metrics computation for the model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableModelingInsights")]
        public bool? EnableModelingInsights { get; set; }

        /// <summary>
        /// Gets or sets defines the splitter strategy to be used by the
        /// build.
        /// RandomSplitter splits the usage data in train and test
        /// sets based on the given
        /// randomSplitterParameters value.
        /// LastEventSplitter splits the usage data in train and
        /// test sets based on the last
        /// transaction for a each user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "splitterStrategy")]
        public string SplitterStrategy { get; set; }

        /// <summary>
        /// Gets or sets specifies the parameters to be used for random
        /// splitter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "randomSplitterParameters")]
        public RandomSplitterParameters RandomSplitterParameters { get; set; }

        /// <summary>
        /// Gets or sets specifies the parameters to be used for date splitter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dateSplitterParameters")]
        public DateSplitterParameters DateSplitterParameters { get; set; }

        /// <summary>
        /// Gets or sets specifies the parameters to be used for computing
        /// popular items for modeling insights. (in number of days)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "popularItemBenchmarkWindow")]
        public int? PopularItemBenchmarkWindow { get; set; }

        /// <summary>
        /// Gets or sets indicates if features can be used in order to enhance
        /// the recommendation model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useFeaturesInModel")]
        public bool? UseFeaturesInModel { get; set; }

        /// <summary>
        /// Gets or sets comma-separated list of feature names to be used
        /// during build.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "modelingFeatureList")]
        public string ModelingFeatureList { get; set; }

        /// <summary>
        /// Gets or sets indicates if the recommendation should also push cold
        /// items via feature similarity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowColdItemPlacement")]
        public bool? AllowColdItemPlacement { get; set; }

        /// <summary>
        /// Gets or sets indicates if features can be used in reasoning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableFeatureCorrelation")]
        public bool? EnableFeatureCorrelation { get; set; }

        /// <summary>
        /// Gets or sets comma-separated list of feature names to be used for
        /// reasoning sentences (e.g. recommendation explanations).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reasoningFeatureList")]
        public string ReasoningFeatureList { get; set; }

        /// <summary>
        /// Gets or sets allow the personalized recommendation a.k.a. U2I
        /// (user to item recommendations).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableU2I")]
        public bool? EnableU2I { get; set; }

    }
}
