// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices.Models
{
    using System.Linq;

    public partial class FbtBuildParameters
    {
        /// <summary>
        /// Initializes a new instance of the FbtBuildParameters class.
        /// </summary>
        public FbtBuildParameters() { }

        /// <summary>
        /// Initializes a new instance of the FbtBuildParameters class.
        /// </summary>
        /// <param name="supportThreshold">Number of co-occurrences of items
        /// to be considered for modeling.</param>
        /// <param name="maxItemSetSize">Bound for number of items in a
        /// frequent set.</param>
        /// <param name="minimalScore">Minimal score that a frequent set
        /// should have in order to be included in the returned
        /// results.</param>
        /// <param name="similarityFunction">Defines the similarity function
        /// to be used by the build.
        /// Lift favors serendipity, Co-occurrence favors
        /// predictability, and Jaccard is a nice compromise between the
        /// two.</param>
        /// <param name="enableModelingInsights">Enable or disable metrics
        /// computation for the model.</param>
        /// <param name="splitterStrategy">Defines the splitter strategy to be
        /// used by the build.
        /// RandomSplitter splits the usage data in train and test
        /// sets based on the given
        /// randomSplitterParameters value.
        /// LastEventSplitter splits the usage data in train and
        /// test sets based on the last
        /// transaction for a each user.</param>
        /// <param name="randomSplitterParameters">Specifies the parameters to
        /// be used for random splitter.</param>
        /// <param name="dateSplitterParameters">Specifies the parameters to
        /// be used for date splitter.</param>
        /// <param name="popularItemBenchmarkWindow">Specifies the parameters
        /// to be used for computing popular items for modeling insights. (in
        /// number of days)</param>
        public FbtBuildParameters(int? supportThreshold = default(int?), int? maxItemSetSize = default(int?), double? minimalScore = default(double?), string similarityFunction = default(string), bool? enableModelingInsights = default(bool?), string splitterStrategy = default(string), RandomSplitterParameters randomSplitterParameters = default(RandomSplitterParameters), DateSplitterParameters dateSplitterParameters = default(DateSplitterParameters), int? popularItemBenchmarkWindow = default(int?))
        {
            SupportThreshold = supportThreshold;
            MaxItemSetSize = maxItemSetSize;
            MinimalScore = minimalScore;
            SimilarityFunction = similarityFunction;
            EnableModelingInsights = enableModelingInsights;
            SplitterStrategy = splitterStrategy;
            RandomSplitterParameters = randomSplitterParameters;
            DateSplitterParameters = dateSplitterParameters;
            PopularItemBenchmarkWindow = popularItemBenchmarkWindow;
        }

        /// <summary>
        /// Gets or sets number of co-occurrences of items to be considered
        /// for modeling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportThreshold")]
        public int? SupportThreshold { get; set; }

        /// <summary>
        /// Gets or sets bound for number of items in a frequent set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxItemSetSize")]
        public int? MaxItemSetSize { get; set; }

        /// <summary>
        /// Gets or sets minimal score that a frequent set should have in
        /// order to be included in the returned results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minimalScore")]
        public double? MinimalScore { get; set; }

        /// <summary>
        /// Gets or sets defines the similarity function to be used by the
        /// build.
        /// Lift favors serendipity, Co-occurrence favors
        /// predictability, and Jaccard is a nice compromise between the two.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "similarityFunction")]
        public string SimilarityFunction { get; set; }

        /// <summary>
        /// Gets or sets enable or disable metrics computation for the model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableModelingInsights")]
        public bool? EnableModelingInsights { get; set; }

        /// <summary>
        /// Gets or sets defines the splitter strategy to be used by the
        /// build.
        /// RandomSplitter splits the usage data in train and test
        /// sets based on the given
        /// randomSplitterParameters value.
        /// LastEventSplitter splits the usage data in train and
        /// test sets based on the last
        /// transaction for a each user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "splitterStrategy")]
        public string SplitterStrategy { get; set; }

        /// <summary>
        /// Gets or sets specifies the parameters to be used for random
        /// splitter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "randomSplitterParameters")]
        public RandomSplitterParameters RandomSplitterParameters { get; set; }

        /// <summary>
        /// Gets or sets specifies the parameters to be used for date splitter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dateSplitterParameters")]
        public DateSplitterParameters DateSplitterParameters { get; set; }

        /// <summary>
        /// Gets or sets specifies the parameters to be used for computing
        /// popular items for modeling insights. (in number of days)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "popularItemBenchmarkWindow")]
        public int? PopularItemBenchmarkWindow { get; set; }

    }
}
