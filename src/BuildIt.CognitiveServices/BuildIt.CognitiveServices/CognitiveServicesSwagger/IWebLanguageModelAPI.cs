// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices
{

    /// <summary>
    /// </summary>
    public partial interface IWebLanguageModelAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }


            /// <summary>
        /// Calculate the conditional probability that a particular word will
        /// follow a given sequence of words.
        /// </summary>
        /// <param name='model'>
        /// Which model to use, supported value: title/anchor/query/body
        /// </param>
        /// <param name='order'>
        /// The order of N-gram. If not specified, use default value 5
        /// .Supported value: 1, 2, 3, 4, 5.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> CalculateConditionalProbabilityWithHttpMessagesAsync(string model, double? order = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Calculate the joint probability that a particular sequence of
        /// words will appear together.
        /// </summary>
        /// <param name='model'>
        /// Which model to use, supported value: title/anchor/query/body
        /// </param>
        /// <param name='order'>
        /// The order of N-gram. If not specified, use default value 5
        /// .Supported value: 1, 2, 3, 4, 5.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> CalculateJointProbabilityWithHttpMessagesAsync(string model, double? order = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of words (completions) most likely to follow a given
        /// sequence of words.
        /// </summary>
        /// <param name='model'>
        /// Which model to use, supported value: title/anchor/query/body
        /// </param>
        /// <param name='words'>
        /// A string containing a sequence of words from which to generate the
        /// list of words likely to follow. The words should be separated by
        /// spaces.
        /// </param>
        /// <param name='order'>
        /// The order of N-gram. If not specified, use default value 5
        /// .Supported value: 1, 2, 3, 4, 5.
        /// </param>
        /// <param name='maxNumOfCandidatesReturned'>
        /// Max number of candidates would be returned. If not specified, use
        /// default value 5.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> GenerateNextWordsWithHttpMessagesAsync(string model, string words, double? order = default(double?), double? maxNumOfCandidatesReturned = default(double?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Insert spaces into a string of words lacking spaces, like a
        /// hashtag or part of a URL. Punctuation or exotic characters can
        /// prevent a string from being broken, so itâ€™s best to limit input
        /// strings to lower-case, alpha-numeric characters.
        /// </summary>
        /// <param name='model'>
        /// Which model to use, supported value: title/anchor/query/body
        /// </param>
        /// <param name='text'>
        /// The line of text to break into words. If spaces are present, they
        /// will be interpreted as hard breaks and maintained, except for
        /// leading or trailing spaces, which will be trimmed.
        /// </param>
        /// <param name='order'>
        /// The order of N-gram. If not specified, use default value 5
        /// .Supported value: 1, 2, 3, 4, 5.
        /// </param>
        /// <param name='maxNumOfCandidatesReturned'>
        /// Max number of candidates would be returned. If not specified, use
        /// default value 5.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> BreakIntoWordsWithHttpMessagesAsync(string model, string text, int? order = default(int?), int? maxNumOfCandidatesReturned = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List models available currently.
        /// </summary>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse> ListAvailableModelsWithHttpMessagesAsync(string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}
