// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices
{
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ContentModeratorReview.
    /// </summary>
    public static partial class ContentModeratorReviewExtensions
    {
            /// <summary>
            /// A job Id will be returned for the Image content posted on this endpoint.
            /// 
            /// Once the content is evaluated against the Workflow provided the review
            /// will be created or ignored based on the workflow expression.
            /// 
            /// &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
            /// 
            /// &lt;p&gt;
            /// &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
            /// 
            /// {&lt;br/&gt;
            /// "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
            /// "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be
            /// created&gt;",&lt;br/&gt;
            /// "WorkFlowId": "default",&lt;br/&gt;
            /// "Status": "&lt;This will be one of Complete, InProgress,
            /// Error&gt;",&lt;br/&gt;
            /// "ContentType": "Image",&lt;br/&gt;
            /// "ContentId": "&lt;This is the ContentId that was specified on
            /// input&gt;",&lt;br/&gt;
            /// "CallBackType": "Job",&lt;br/&gt;
            /// "Metadata": {&lt;br/&gt;
            /// "adultscore": "0.xxx",&lt;br/&gt;
            /// "a": "False",&lt;br/&gt;
            /// "racyscore": "0.xxx",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// }&lt;br/&gt;
            /// }&lt;br/&gt;
            /// 
            /// &lt;/p&gt;
            /// &lt;p&gt;
            /// &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
            /// 
            /// {
            /// "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
            /// "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
            /// "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
            /// "CallBackType": "Review",&lt;br/&gt;
            /// "ContentId": "&lt;The ContentId that was specified
            /// input&gt;",&lt;br/&gt;
            /// "Metadata": {&lt;br/&gt;
            /// "adultscore": "0.xxx",
            /// "a": "False",&lt;br/&gt;
            /// "racyscore": "0.xxx",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// },&lt;br/&gt;
            /// "ReviewerResultTags": {&lt;br/&gt;
            /// "a": "False",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// }&lt;br/&gt;
            /// }&lt;br/&gt;
            /// 
            /// &lt;/p&gt;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamName'>
            /// Your team name
            /// </param>
            /// <param name='contentId'>
            /// Content Id/Name
            /// </param>
            /// <param name='workflowName'>
            /// Workflow Name, if left empty your teams default workflow would be used
            /// </param>
            /// <param name='callBackEndpoint'>
            /// Callback endpoint for posting the reviews result.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void JobCreate(this IContentModeratorReview operations, string teamName, string contentId, string workflowName, string callBackEndpoint = default(string), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorReview)s).JobCreateAsync(teamName, contentId, workflowName, callBackEndpoint, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// A job Id will be returned for the Image content posted on this endpoint.
            /// 
            /// Once the content is evaluated against the Workflow provided the review
            /// will be created or ignored based on the workflow expression.
            /// 
            /// &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
            /// 
            /// &lt;p&gt;
            /// &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
            /// 
            /// {&lt;br/&gt;
            /// "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
            /// "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be
            /// created&gt;",&lt;br/&gt;
            /// "WorkFlowId": "default",&lt;br/&gt;
            /// "Status": "&lt;This will be one of Complete, InProgress,
            /// Error&gt;",&lt;br/&gt;
            /// "ContentType": "Image",&lt;br/&gt;
            /// "ContentId": "&lt;This is the ContentId that was specified on
            /// input&gt;",&lt;br/&gt;
            /// "CallBackType": "Job",&lt;br/&gt;
            /// "Metadata": {&lt;br/&gt;
            /// "adultscore": "0.xxx",&lt;br/&gt;
            /// "a": "False",&lt;br/&gt;
            /// "racyscore": "0.xxx",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// }&lt;br/&gt;
            /// }&lt;br/&gt;
            /// 
            /// &lt;/p&gt;
            /// &lt;p&gt;
            /// &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
            /// 
            /// {
            /// "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
            /// "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
            /// "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
            /// "CallBackType": "Review",&lt;br/&gt;
            /// "ContentId": "&lt;The ContentId that was specified
            /// input&gt;",&lt;br/&gt;
            /// "Metadata": {&lt;br/&gt;
            /// "adultscore": "0.xxx",
            /// "a": "False",&lt;br/&gt;
            /// "racyscore": "0.xxx",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// },&lt;br/&gt;
            /// "ReviewerResultTags": {&lt;br/&gt;
            /// "a": "False",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// }&lt;br/&gt;
            /// }&lt;br/&gt;
            /// 
            /// &lt;/p&gt;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamName'>
            /// Your team name
            /// </param>
            /// <param name='contentId'>
            /// Content Id/Name
            /// </param>
            /// <param name='workflowName'>
            /// Workflow Name, if left empty your teams default workflow would be used
            /// </param>
            /// <param name='callBackEndpoint'>
            /// Callback endpoint for posting the reviews result.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task JobCreateAsync(this IContentModeratorReview operations, string teamName, string contentId, string workflowName, string callBackEndpoint = default(string), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.JobCreateWithHttpMessagesAsync(teamName, contentId, workflowName, callBackEndpoint, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the Job Details for a Job Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamName'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void JobGet(this IContentModeratorReview operations, string teamName, string jobId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorReview)s).JobGetAsync(teamName, jobId, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the Job Details for a Job Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamName'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task JobGetAsync(this IContentModeratorReview operations, string teamName, string jobId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.JobGetWithHttpMessagesAsync(teamName, jobId, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// The reviews created would show up for Reviewers on your team. As Reviewers
            /// complete reviewing, results of the Review would be POSTED (i.e. HTTP
            /// POST) on the specified CallBackEndpoint.
            /// 
            /// &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
            /// &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
            /// &lt;p&gt;
            /// {&lt;br/&gt;
            /// "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
            /// "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
            /// "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
            /// "CallBackType": "Review",&lt;br/&gt;
            /// "ContentId": "&lt;The ContentId that was specified
            /// input&gt;",&lt;br/&gt;
            /// "Metadata": {&lt;br/&gt;
            /// "adultscore": "0.xxx",&lt;br/&gt;
            /// "a": "False",&lt;br/&gt;
            /// "racyscore": "0.xxx",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// },&lt;br/&gt;
            /// "ReviewerResultTags": {&lt;br/&gt;
            /// "a": "False",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// }&lt;br/&gt;
            /// }&lt;br/&gt;
            /// 
            /// &lt;/p&gt;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamName'>
            /// Your Team Name
            /// </param>
            /// <param name='subTeam'>
            /// Optional paramter used to specify the Sub Team for this review
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void ReviewCreate(this IContentModeratorReview operations, string teamName, string subTeam = default(string), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorReview)s).ReviewCreateAsync(teamName, subTeam, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The reviews created would show up for Reviewers on your team. As Reviewers
            /// complete reviewing, results of the Review would be POSTED (i.e. HTTP
            /// POST) on the specified CallBackEndpoint.
            /// 
            /// &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
            /// &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
            /// &lt;p&gt;
            /// {&lt;br/&gt;
            /// "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
            /// "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
            /// "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
            /// "CallBackType": "Review",&lt;br/&gt;
            /// "ContentId": "&lt;The ContentId that was specified
            /// input&gt;",&lt;br/&gt;
            /// "Metadata": {&lt;br/&gt;
            /// "adultscore": "0.xxx",&lt;br/&gt;
            /// "a": "False",&lt;br/&gt;
            /// "racyscore": "0.xxx",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// },&lt;br/&gt;
            /// "ReviewerResultTags": {&lt;br/&gt;
            /// "a": "False",&lt;br/&gt;
            /// "r": "True"&lt;br/&gt;
            /// }&lt;br/&gt;
            /// }&lt;br/&gt;
            /// 
            /// &lt;/p&gt;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamName'>
            /// Your Team Name
            /// </param>
            /// <param name='subTeam'>
            /// Optional paramter used to specify the Sub Team for this review
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ReviewCreateAsync(this IContentModeratorReview operations, string teamName, string subTeam = default(string), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ReviewCreateWithHttpMessagesAsync(teamName, subTeam, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns review details for the review Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamName'>
            /// </param>
            /// <param name='reviewId'>
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void ReviewGet(this IContentModeratorReview operations, string teamName, string reviewId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorReview)s).ReviewGetAsync(teamName, reviewId, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns review details for the review Id passed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamName'>
            /// </param>
            /// <param name='reviewId'>
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ReviewGetAsync(this IContentModeratorReview operations, string teamName, string reviewId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ReviewGetWithHttpMessagesAsync(teamName, reviewId, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create a new workflow or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='team'>
            /// Your Team name
            /// </param>
            /// <param name='workflowname'>
            /// Provide a name for this workflow
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void WorkflowCreateOrUpdate(this IContentModeratorReview operations, string team, string workflowname, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorReview)s).WorkflowCreateOrUpdateAsync(team, workflowname, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new workflow or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='team'>
            /// Your Team name
            /// </param>
            /// <param name='workflowname'>
            /// Provide a name for this workflow
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task WorkflowCreateOrUpdateAsync(this IContentModeratorReview operations, string team, string workflowname, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.WorkflowCreateOrUpdateWithHttpMessagesAsync(team, workflowname, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the details of a specific Workflow on your Team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='team'>
            /// Your Team name
            /// </param>
            /// <param name='workflowname'>
            /// Provide a name for this workflow
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void WorkflowGet(this IContentModeratorReview operations, string team, string workflowname, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorReview)s).WorkflowGetAsync(team, workflowname, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the details of a specific Workflow on your Team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='team'>
            /// Your Team name
            /// </param>
            /// <param name='workflowname'>
            /// Provide a name for this workflow
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task WorkflowGetAsync(this IContentModeratorReview operations, string team, string workflowname, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.WorkflowGetWithHttpMessagesAsync(team, workflowname, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get all the Workflows available for you Team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='team'>
            /// Your Team name
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void WorkflowGetAll(this IContentModeratorReview operations, string team, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorReview)s).WorkflowGetAllAsync(team, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the Workflows available for you Team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='team'>
            /// Your Team name
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task WorkflowGetAllAsync(this IContentModeratorReview operations, string team, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.WorkflowGetAllWithHttpMessagesAsync(team, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
