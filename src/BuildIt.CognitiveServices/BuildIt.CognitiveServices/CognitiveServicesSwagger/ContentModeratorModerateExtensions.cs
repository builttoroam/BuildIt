// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices
{
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ContentModeratorModerate.
    /// </summary>
    public static partial class ContentModeratorModerateExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheImage'>
            /// Whether to retain the submitted image for future use; defaults to false if
            /// omitted
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void ImageFindFaces(this IContentModeratorModerate operations, bool? cacheImage = default(bool?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorModerate)s).ImageFindFacesAsync(cacheImage, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheImage'>
            /// Whether to retain the submitted image for future use; defaults to false if
            /// omitted
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ImageFindFacesAsync(this IContentModeratorModerate operations, bool? cacheImage = default(bool?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ImageFindFacesWithHttpMessagesAsync(cacheImage, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns any text found in the image for the language specified. If no
            /// language is specified in input then the detection defaults to English.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheImage'>
            /// Whether to retain the submitted image for future use; defaults to false if
            /// omitted
            /// </param>
            /// <param name='enhanced'>
            /// When set to True, the image goes through additional processing to come
            /// with additional candidates.
            /// 
            /// image/tiff is not supported when enhanced is set to true
            /// 
            /// Note: This impacts the response time.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void ImageOCR(this IContentModeratorModerate operations, bool? cacheImage = false, bool? enhanced = false, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorModerate)s).ImageOCRAsync(cacheImage, enhanced, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns any text found in the image for the language specified. If no
            /// language is specified in input then the detection defaults to English.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheImage'>
            /// Whether to retain the submitted image for future use; defaults to false if
            /// omitted
            /// </param>
            /// <param name='enhanced'>
            /// When set to True, the image goes through additional processing to come
            /// with additional candidates.
            /// 
            /// image/tiff is not supported when enhanced is set to true
            /// 
            /// Note: This impacts the response time.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ImageOCRAsync(this IContentModeratorModerate operations, bool? cacheImage = false, bool? enhanced = false, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ImageOCRWithHttpMessagesAsync(cacheImage, enhanced, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns probabilities of the image containing racy or adult content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheImage'>
            /// Whether to retain the submitted image for future use; defaults to false if
            /// omitted
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void ImageEvaluate(this IContentModeratorModerate operations, bool? cacheImage = default(bool?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorModerate)s).ImageEvaluateAsync(cacheImage, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns probabilities of the image containing racy or adult content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cacheImage'>
            /// Whether to retain the submitted image for future use; defaults to false if
            /// omitted
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ImageEvaluateAsync(this IContentModeratorModerate operations, bool? cacheImage = default(bool?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ImageEvaluateWithHttpMessagesAsync(cacheImage, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Fuzzily match an image against one of your custom Image Lists. You can
            /// create and manage your custom image lists using &lt;a
            /// href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt;
            /// API.
            /// 
            /// Returns ID and tags of matching image.&lt;br/&gt;
            /// &lt;br/&gt;
            /// Note: Refresh Index must be run on the corresponding Image List before
            /// additions and removals are reflected in the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// </param>
            /// <param name='cacheimage'>
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void ImageMatch(this IContentModeratorModerate operations, string listId = default(string), bool? cacheimage = default(bool?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorModerate)s).ImageMatchAsync(listId, cacheimage, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fuzzily match an image against one of your custom Image Lists. You can
            /// create and manage your custom image lists using &lt;a
            /// href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt;
            /// API.
            /// 
            /// Returns ID and tags of matching image.&lt;br/&gt;
            /// &lt;br/&gt;
            /// Note: Refresh Index must be run on the corresponding Image List before
            /// additions and removals are reflected in the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='listId'>
            /// </param>
            /// <param name='cacheimage'>
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ImageMatchAsync(this IContentModeratorModerate operations, string listId = default(string), bool? cacheimage = default(bool?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ImageMatchWithHttpMessagesAsync(listId, cacheimage, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// This operation will detect the language of given input content. Returns
            /// the &lt;a href="http://www-01.sil.org/iso639-3/codes.asp"&gt;ISO 639-3
            /// code&lt;/a&gt; for the predominant language comprising the submitted
            /// text. Over 110 languages supported.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void TextDetectLanguage(this IContentModeratorModerate operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorModerate)s).TextDetectLanguageAsync(subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation will detect the language of given input content. Returns
            /// the &lt;a href="http://www-01.sil.org/iso639-3/codes.asp"&gt;ISO 639-3
            /// code&lt;/a&gt; for the predominant language comprising the submitted
            /// text. Over 110 languages supported.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task TextDetectLanguageAsync(this IContentModeratorModerate operations, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.TextDetectLanguageWithHttpMessagesAsync(subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// The operation detects profanity in more than 100 languages, report on
            /// suspicious malware and phishing URLs, and match against custom and shared
            /// blacklists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='autocorrect'>
            /// Runs auto correction on the input, before running other operations.
            /// </param>
            /// <param name='urls'>
            /// Detects URLs in the input and analyses each URL to return a score for
            /// Malware, Phishing, and Adult.
            /// </param>
            /// <param name='pII'>
            /// Detects Personal Identifiable Information (PII) in the input.
            /// </param>
            /// <param name='listId'>
            /// The Term list to be for matching
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            public static void TextScreen(this IContentModeratorModerate operations, bool? autocorrect = default(bool?), bool? urls = default(bool?), bool? pII = default(bool?), string listId = default(string), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContentModeratorModerate)s).TextScreenAsync(autocorrect, urls, pII, listId, subscriptionKey, ocpApimSubscriptionKey), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation detects profanity in more than 100 languages, report on
            /// suspicious malware and phishing URLs, and match against custom and shared
            /// blacklists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='autocorrect'>
            /// Runs auto correction on the input, before running other operations.
            /// </param>
            /// <param name='urls'>
            /// Detects URLs in the input and analyses each URL to return a score for
            /// Malware, Phishing, and Adult.
            /// </param>
            /// <param name='pII'>
            /// Detects Personal Identifiable Information (PII) in the input.
            /// </param>
            /// <param name='listId'>
            /// The Term list to be for matching
            /// </param>
            /// <param name='subscriptionKey'>
            /// subscription key in url
            /// </param>
            /// <param name='ocpApimSubscriptionKey'>
            /// subscription key in header
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task TextScreenAsync(this IContentModeratorModerate operations, bool? autocorrect = default(bool?), bool? urls = default(bool?), bool? pII = default(bool?), string listId = default(string), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.TextScreenWithHttpMessagesAsync(autocorrect, urls, pII, listId, subscriptionKey, ocpApimSubscriptionKey, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
