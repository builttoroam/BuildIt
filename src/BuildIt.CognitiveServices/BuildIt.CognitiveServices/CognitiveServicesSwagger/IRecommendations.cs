// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BuildIt.CognitiveServices
{
    using Models;

    /// <summary>
    /// The Recommendations API identifies consumption patterns from your
    /// transaction information in order to provide recommendations. These
    /// recommendations can help your customers more easily discover items
    /// that they may be interested in.&lt;br&gt; By showing your customers
    /// products that they are more likely to be interested in, you will, in
    /// turn, increase your sales.
    /// </summary>
    public partial interface IRecommendations : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }


            /// <summary>
        /// Retrieves information on all builds for a given model.
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='onlyLastRequestedBuild'>
        /// true to return only the last build of the model, false to return
        /// all the builds
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetallbuildsWithHttpMessagesAsync(string modelId, bool? onlyLastRequestedBuild = default(bool?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;style type="text/css"&gt;
        /// &lt;!--
        /// .tab {
        /// margin-left: 40px;
        /// }
        /// --&gt;
        /// &lt;/style&gt;
        /// &lt;p&gt;
        /// By creating a new build, you start the training process that
        /// will allow you to generate a machine learning model that you can
        /// later on query for recommendations.
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// Before triggering a build you first must upload catalog and
        /// usage data.
        /// Triggering a new build is an asynchronous operations.	 Once a
        /// build is triggered you will receive an
        /// &lt;i&gt;operation&lt;/i&gt; (in the Operation-Location header of
        /// the response)
        /// that you can use to track the build status, or to cancel the
        /// build operation.
        /// See the "Retrieve the status of an operation" API.
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// There are 3 types of builds: a &lt;i&gt;Recommendation&lt;/i&gt;
        /// build, a &lt;i&gt;Rank&lt;/i&gt; build and an &lt;i&gt;
        /// FBT&lt;/i&gt; build.
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Recommendation build&lt;/b&gt;&lt;br /&gt;
        /// Predictions (for this type of build) come in two flavors:
        /// &lt;br&gt;
        /// &lt;p class="tab"&gt;
        /// &lt;i&gt;Item to Item recommendations (I2I)&lt;/i&gt;
        /// &lt;br&gt;Given an item or a list of items, it will predict
        /// other items that are likely to be of high interest to customers
        /// that have interacted with the original set of items.
        /// &lt;/p&gt;
        /// &lt;p class="tab"&gt;
        /// &lt;i&gt;User to Item recommendations (U2I) &lt;/i&gt;
        /// &lt;br&gt;Given a user id (and optionally a list of items) this
        /// option will predict a list of items that are likely to be of high
        /// interest to the given user (and its additional choice of items).
        /// The U2I recommendations are based on the history of items that
        /// were of interest to the user.
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;FBT or Frequently-Bought-Together build&lt;/b&gt;&lt;br
        /// /&gt;
        /// An FBT build is yet another recommendations algorithm called
        /// sometimes a "conservative" recommender.	It counts the number of
        /// times two or three different products co-occur together, and then
        /// sorts the sets based on a similarity function (Co-occurrences,
        /// Jaccard, Lift).
        /// Given an item, and FBT build returns other items that are likely
        /// to occur in the same transaction.
        /// &lt;br /&gt;
        /// Note: If the usage files that you uploaded contain the optional
        /// field "event type", for FBT modelling only "Purchase" events will
        /// be used. If no event type is provided all events will be
        /// considered as purchase events.
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Rank build&lt;/b&gt;&lt;br/&gt;
        /// A rank build is a technical build that allows you to learn about
        /// the usefulness of your features.&lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;Learn more&lt;/b&gt;&lt;br /&gt;
        /// More information about different build types can be found on the
        /// 
        /// &lt;a
        /// href="https://azure.microsoft.com/en-us/documentation/articles/cognitive-services-recommendations-buildtypes/"&gt;Build
        /// Types and Model Quality&lt;/a&gt; document.
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Generic Build Parameters&lt;/b&gt;
        /// 
        /// &lt;table border="1" cellpadding="05" cellspacing="5"
        /// style="border-collapse:collapse;"&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Name &lt;/td&gt;
        /// &lt;td&gt;Description&lt;/td&gt;
        /// &lt;td&gt;Type&lt;/td&gt;
        /// &lt;td&gt;Valid Value&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Description&lt;/td&gt;
        /// &lt;td&gt;The description of the build.&lt;/td&gt;
        /// &lt;td&gt;String&lt;/td&gt;
        /// &lt;td&gt;Any text, maximum 512 chars&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;BuildType&lt;/td&gt;
        /// &lt;td&gt;The type of build.&lt;/td&gt;
        /// &lt;td&gt;String&lt;/td&gt;
        /// &lt;td&gt;Either &lt;i&gt;recommendation&lt;/i&gt;,
        /// &lt;i&gt;fbt&lt;/i&gt; or &lt;i&gt;rank&lt;/i&gt;&lt;/td&gt;
        /// &lt;/tr&gt;
        /// 
        /// 
        /// &lt;/table&gt;
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Recommendation Build Type Parameters&lt;/b&gt;&lt;br
        /// /&gt;
        /// &lt;table border="1" cellpadding="5" cellspacing="5"
        /// style="border-collapse:collapse;"&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Name &lt;/td&gt;
        /// &lt;td&gt;Description&lt;/td&gt;
        /// &lt;td&gt;Type&lt;/td&gt;
        /// &lt;td&gt;Valid Value&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;NumberOfModelIterations&lt;/td&gt;
        /// &lt;td&gt;The number of iterations the model performs is
        /// reflected by the overall compute time and the model accuracy. The
        /// higher the number, the better accuracy you will get, but the
        /// compute time will take longer. (Default is 20)&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;10 to 50 (Default: 40)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;NumberOfModelDimensions&lt;/td&gt;
        /// &lt;td&gt;The number of dimensions relates to the number of
        /// 'features' the model will try to find within your data.
        /// Increasing the number of dimensions will allow better fine-tuning
        /// of the results into smaller clusters. However, too many
        /// dimensions will prevent the model from finding correlations
        /// between items.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;10 to 40 (Default: 20)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;ItemCutOffLowerBound&lt;/td&gt;
        /// &lt;td&gt;Defines the minimum number of usage points an item
        /// should be in for it to be considered in the model.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;0 to 30 (Default: 20)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;ItemCutOffUpperBound&lt;/td&gt;
        /// &lt;td&gt;Defines the maximum number of usage points an item
        /// should be in for it to be considered in the model.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;0 to 30 (Default: Not set)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// 
        /// &lt;tr&gt;
        /// &lt;td&gt;UserCutOffLowerBound&lt;/td&gt;
        /// &lt;td&gt;Defines the minimum number of transactions a user
        /// must have performed to be considered in the model.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;0 to 10 (Default: 2)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;UserCutOffUpperBound&lt;/td&gt;
        /// &lt;td&gt;Defines the maximum number of transactions a user
        /// must have performed to be considered in the model.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;0 to 10 (Default: Not set)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;EnableModelingInsights&lt;/td&gt;
        /// &lt;td&gt;Defines whether offline evaluation should be
        /// performed in order to gather modeling insights (i.e. precision
        /// and diversity metrics).
        /// If set to true, a subset of the data will not be used for
        /// training as it will need to be reserved for testing of the model.
        /// &lt;a
        /// href="https://azure.microsoft.com/en-us/documentation/articles/cognitive-services-recommendations-buildtypes/#offline-evaluation"
        /// &gt;Read more about offline evaluations&lt;/a&gt;
        /// &lt;/td&gt;
        /// &lt;td&gt;Boolean&lt;/td&gt;
        /// &lt;td&gt;Valid Values: True/False (Default: False)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// 
        /// &lt;tr&gt;
        /// &lt;td&gt;UseFeaturesInModel&lt;/td&gt;
        /// &lt;td&gt;
        /// Indicates if features can be used in order to enhance the
        /// recommendation model.
        /// &lt;/td&gt;
        /// &lt;td&gt;Boolean&lt;/td&gt;
        /// &lt;td&gt;Valid Values: True/False (Default: True if features
        /// in the model)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// 
        /// 
        /// &lt;tr&gt;
        /// &lt;td&gt;ModelingFeatureList&lt;/td&gt;
        /// &lt;td&gt; Comma-separated list of feature names to be used in
        /// the recommendation build, in order to enhance the recommendation.
        /// If the given list is empty, no features will be used to
        /// train the model.
        /// &lt;/td&gt;
        /// &lt;td&gt;String&lt;/td&gt;
        /// &lt;td&gt;Valid Values: Feature names, up to 512
        /// chars&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;AllowColdItemPlacement&lt;/td&gt;
        /// &lt;td&gt;Indicates if the recommendation should also push
        /// cold items via feature similarity.&lt;/td&gt;
        /// &lt;td&gt;Boolean&lt;/td&gt;
        /// &lt;td&gt;Valid Values: True/False&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;EnableFeatureCorrelation&lt;/td&gt;
        /// &lt;td&gt;Indicates if features can be used in
        /// reasoning.&lt;/td&gt;
        /// &lt;td&gt;Boolean&lt;/td&gt;
        /// &lt;td&gt;Valid Values: True/False&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;ReasoningFeatureList&lt;/td&gt;
        /// &lt;td&gt;Comma-separated list of feature names to be used for
        /// reasoning sentences (e.g. recommendation
        /// explanations).&lt;/td&gt;
        /// &lt;td&gt;String&lt;/td&gt;
        /// &lt;td&gt;Valid Values: Feature names, up to 512
        /// chars&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;EnableU2I&lt;/td&gt;
        /// &lt;td&gt;Enable personalized recommendation a.k.a. U2I (user
        /// to item recommendations).&lt;/td&gt;
        /// &lt;td&gt;Boolean&lt;/td&gt;
        /// &lt;td&gt;Valid Values: True/False&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;FBT Build Parameters&lt;/b&gt;&lt;br /&gt;
        /// &lt;table border="1" cellpadding="5" cellspacing="5"
        /// style="border-collapse:collapse;"&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;FbtSupportThreshold&lt;/td&gt;
        /// &lt;td&gt;How conservative the model is. Number of
        /// co-occurrences of items to be considered for modeling.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;Valid Values: 3-50 (default: 6)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;FbtMaxItemSetSize&lt;/td&gt;
        /// &lt;td&gt;Bounds the number of items in a frequent
        /// set.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;Valid Values: 2-3 (default: 2)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;FbtMinimalScore&lt;/td&gt;
        /// &lt;td&gt;Minimal score that a frequent set should have in
        /// order to be included in the returned results. The higher the
        /// better.&lt;/td&gt;
        /// &lt;td&gt;Double&lt;/td&gt;
        /// &lt;td&gt;0 and above&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;FbtSimilarityFunction&lt;/td&gt;
        /// &lt;td&gt;Defines the similarity function to be used by the
        /// build. Lift favors serendipity, Co-occurrence favors
        /// predictability, and Jaccard is a nice compromise between the
        /// two.&lt;/td&gt;
        /// &lt;td&gt;String&lt;/td&gt;
        /// &lt;td&gt;cooccurrence, lift, jaccard (default:
        /// lift)&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/p&gt;
        /// 
        /// 
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Rank Build Parameters&lt;/b&gt;
        /// &lt;table border="1" cellpadding="5" cellspacing="5"
        /// style="border-collapse:collapse;"&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;NumberOfModelIterations&lt;/td&gt;
        /// &lt;td&gt;The number of iterations the model performs is
        /// reflected by the overall compute time and the model accuracy. The
        /// higher the number, the better accuracy you will get, but the
        /// compute time will take longer.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;10-50&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;NumberOfModelDimensions&lt;/td&gt;
        /// &lt;td&gt;The number of dimensions relates to the number
        /// of 'features' the model will try to find within your data.
        /// Increasing the number of dimensions will allow better fine-tuning
        /// of the results into smaller clusters. However, too many
        /// dimensions will prevent the model from finding correlations
        /// between items.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;10-40&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;ItemCutOffLowerBound&lt;/td&gt;
        /// &lt;td&gt;Defines the minimum number of usage points an
        /// item should be in for it to be considered in the
        /// model.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;0-30&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;ItemCutOffUpperBound&lt;/td&gt;
        /// &lt;td&gt;Defines the maximum number of usage points an
        /// item should be in for it to be considered in the
        /// model.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;Greater than ItemCutOffLowerBound&lt;/td&gt;
        /// &lt;/tr&gt;
        /// 
        /// &lt;tr&gt;
        /// &lt;td&gt;UserCutOffLowerBound&lt;/td&gt;
        /// &lt;td&gt;Defines the minimum number of transactions a
        /// user must have performed to be considered in the
        /// model.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;0-10&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;UserCutOffUpperBound&lt;/td&gt;
        /// &lt;td&gt;Defines the maximum number of transactions a
        /// user must have performed to be considered in the
        /// model.&lt;/td&gt;
        /// &lt;td&gt;Integer&lt;/td&gt;
        /// &lt;td&gt;Greater than UserCutOffLowerBound&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/p&gt;
        /// 
        /// &lt;br&gt;
        /// &lt;p&gt;
        /// Example:
        /// &lt;br&gt;
        /// &lt;PRE&gt;
        /// {&lt;br&gt;
        /// "description": "Simple recomendations build",&lt;br&gt;
        /// "buildType": "recommendation",&lt;br&gt;
        /// "buildParameters": {&lt;br&gt;
        /// "recommendation": {&lt;br&gt;
        /// "numberOfModelIterations": 10,&lt;br&gt;
        /// "numberOfModelDimensions": 40,&lt;br&gt;
        /// "itemCutOffLowerBound": 1,&lt;br&gt;
        /// "itemCutOffUpperBound": 10,&lt;br&gt;
        /// "userCutOffLowerBound": 0,&lt;br&gt;
        /// "userCutOffUpperBound": 0,&lt;br&gt;
        /// "enableModelingInsights": false,&lt;br&gt;
        /// "useFeaturesInModel": false,&lt;br&gt;
        /// "modelingFeatureList": "string",&lt;br&gt;
        /// "allowColdItemPlacement": false,&lt;br&gt;
        /// "enableFeatureCorrelation": true,&lt;br&gt;
        /// "reasoningFeatureList": "string",&lt;br&gt;
        /// "enableU2I": true&lt;br&gt;
        /// }&lt;br&gt;
        /// }&lt;br&gt;
        /// }&lt;br&gt;
        /// &lt;/PRE&gt;
        /// &lt;/p&gt;
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='buildRequestInfo'>
        /// Parameters for the build request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> CreateTriggerbuildWithHttpMessagesAsync(string modelId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), BuildRequestInfo buildRequestInfo = default(BuildRequestInfo), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves information about the build, including parameters used
        /// to build it.
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='buildId'>
        /// Format - int64. Unique identifier of the build
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetbuildbyidWithHttpMessagesAsync(string modelId, int buildId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a build.
        /// &lt;p&gt;You cannot delete an active build, you will get an error.
        /// The model should be updated to a different active build before
        /// you delete it. &lt;/p&gt;
        /// &lt;p&gt;You cannot delete an in-progress build. You should cancel
        /// the build first by submitting Cancel Build request.&lt;/p&gt;
        /// </summary>
        /// <param name='buildId'>
        /// Format - int64. Unique identifier of the build
        /// </param>
        /// <param name='modelId'>
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> DeletebuildWithHttpMessagesAsync(int buildId, string modelId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;Get recommendations for one or more items based on a
        /// specific build.&lt;/p&gt;
        /// &lt;p&gt;Special cases (If
        /// &lt;i&gt;AllowColdItemPlacement&lt;/i&gt; option is not set when
        /// building the model): &lt;br&gt;
        /// 1. If the item list contains just a single item that is not in
        /// the catalog - an empty list is returned.&lt;br&gt;
        /// 2. If the item list contains some items that don't appear in the
        /// catalog - these are removed and a result is generated based on
        /// the other items.&lt;br&gt;
        /// 3. If an item list contains only &lt;i&gt;cold items&lt;/i&gt;
        /// the &lt;i&gt;most popular&lt;/i&gt; recommendation list is
        /// generated as a response.&lt;br&gt;
        /// 4. If the items list contains some &lt;i&gt;cold&lt;/i&gt; items
        /// (after removing the items that don't appear in the catalog) - the
        /// result is generated based on the other items only.&lt;br&gt;
        /// &lt;p&gt;
        /// Empty recommendations may be returned if none of the items are
        /// in the catalog or if the trained model did not have sufficient
        /// data to provide recommendations for the items.
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// If a build id is not specified, the active build will be used to
        /// return recommendations.
        /// Ranking builds are not supported for getting recommendations. A
        /// ranking build is used for getting the features ranking only.
        /// &lt;/p&gt;
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='itemIds'>
        /// Comma-separated list of the items to recommend for. If the active
        /// build is of type FBT, then you can send only one item. Max
        /// length: 1024
        /// </param>
        /// <param name='numberOfResults'>
        /// Format - int32. Number of recommended items to return
        /// </param>
        /// <param name='minimalScore'>
        /// Format - double. Minmal score, currently honored for only FBT
        /// builds.
        /// </param>
        /// <param name='includeMetadata'>
        /// Future use, always false.
        /// </param>
        /// <param name='buildId'>
        /// Format - int64. The build id to use for this recommendation
        /// request. If the number is less than 0, uses the active build of
        /// the model instead.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetitemToItemrecommendationsWithHttpMessagesAsync(string modelId, string itemIds, int numberOfResults, double minimalScore, bool? includeMetadata = default(bool?), int? buildId = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all models.
        /// </summary>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ModelInfoList>> GetallmodelsWithHttpMessagesAsync(string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A model is a container of your usage data, catalog data and the
        /// recommendation model.&lt;br&gt;
        /// Once you have created a model, you can upload your catalog data,
        /// upload your usage data and start the training process by creating
        /// builds on that model.
        /// 
        /// &lt;p&gt;&lt;b&gt;Notes&lt;/b&gt;&lt;/p&gt;
        /// &lt;p&gt;You may create up to 10 models. If you need to delete
        /// unused models, you may use the "Delete a model" API.&lt;/p&gt;
        /// </summary>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='modelRequestInfo'>
        /// Parameters for the new model
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> CreatemodelWithHttpMessagesAsync(string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), ModelRequestInfo modelRequestInfo = default(ModelRequestInfo), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves information about a model with a given ID.
        /// </summary>
        /// <param name='id'>
        /// Unique identifier of the model to be fetched.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetmodelWithHttpMessagesAsync(string id, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing model by ID.
        /// </summary>
        /// <param name='id'>
        /// Unique identifier of the model.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> DeletemodelWithHttpMessagesAsync(string id, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;Allows you to update the description or the active build
        /// for a model.&lt;/p&gt;
        /// &lt;p&gt;&lt;b&gt;Active build ID&lt;/b&gt;
        /// – Every build for every model has a build ID. By default the
        /// first build produced is set as the active build for the model.
        /// Once you have an active build ID and you do additional builds
        /// for the same model, you need to explicitly set it as the default
        /// build ID if you want to. When you consume recommendations, if you
        /// do not specify the build ID that you want to use, the default one
        /// will be used automatically.&lt;/p&gt;&lt;p&gt;This mechanism
        /// enables you - once you have a recommendation model in production
        /// - to build new models and test them before you promote them to
        /// production.&lt;/p&gt;
        /// </summary>
        /// <param name='id'>
        /// Unique identifier of the model.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='updateModelRequestInfo'>
        /// An object describing the changes to the model, at least one
        /// property should not be null.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> UpdatemodelWithHttpMessagesAsync(string id, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), UpdateModelRequestInfo updateModelRequestInfo = default(UpdateModelRequestInfo), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;Retrieves the status of an operation given the operation
        /// ID. You will need to use this API to track the status of a build
        /// operation, for instance.&lt;/p&gt;&lt;p&gt;To get the operation
        /// ID location, you should check the Operation-Location header that
        /// is returned on the response when you are triggering a
        /// build.&lt;/p&gt;
        /// </summary>
        /// <param name='id'>
        /// Operation ID
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetoperationstatusWithHttpMessagesAsync(string id, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;Cancels an ongoing operation. One example is to cancel a
        /// build request that was submitted.&lt;/p&gt;
        /// &lt;p&gt;To get the operation ID location, you should check the
        /// &lt;i&gt;Operation-Location&lt;/i&gt; header that is returned on
        /// the response when
        /// you are triggering a build.&lt;/p&gt;
        /// </summary>
        /// <param name='id'>
        /// Operation ID
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> CanceloperationWithHttpMessagesAsync(string id, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get user recommendations of a build of type "Recommendation"
        /// marked as active build.&lt;br&gt;
        /// The API will return a list of predicted items according to the
        /// usage history of the user.&lt;br&gt;
        /// Note:	There is no user recommendation for an
        /// &lt;i&gt;FBT&lt;/i&gt; build. If the active build is
        /// &lt;i&gt;FBT&lt;/i&gt;, this method will return an error.
        /// 
        /// &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;&lt;/p&gt;
        /// &lt;p&gt;The EnableU2I build parameter needs to be set to true in
        /// order to train the model so that it can support user
        /// recommendations.&lt;/p&gt;
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model.
        /// </param>
        /// <param name='userId'>
        /// Unique user identifier.
        /// </param>
        /// <param name='numberOfResults'>
        /// Format - int32. Number of recommended items to return.
        /// </param>
        /// <param name='itemsIds'>
        /// The unique identifiers of the items to consider in addition to
        /// user history.
        /// </param>
        /// <param name='includeMetadata'>
        /// If true - include items' metadata
        /// </param>
        /// <param name='buildId'>
        /// Format - int64. Build identifier, if the number is less than 0,
        /// uses the active build of the model instead.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetuserToItemrecommendationsWithHttpMessagesAsync(string modelId, string userId, int numberOfResults, string itemsIds = default(string), bool? includeMetadata = default(bool?), int? buildId = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;Once you have created a model, you will need to upload
        /// catalog data and usage data to it before you can train the system
        /// and create a build.
        /// The catalog data contains information about the items you are
        /// offering to your customer.&lt;p&gt;
        /// &lt;p&gt;
        /// It needs to be passed as the content of body request and it should
        /// follow this format.&lt;br /&gt;
        /// &lt;br&gt;
        /// &amp;lt; Id&amp;gt;,&amp;lt;Item Name&amp;gt;,&amp;lt;Item
        /// Category&amp;gt;,[&amp;lt;Description&amp;gt;],&amp;lt;Features
        /// list&amp;gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;
        /// Additional details
        /// &lt;/b&gt;&lt;br /&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;table border="1" cellpadding="10" cellspacing="10"
        /// style="border-collapse:collapse;" &gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Name &lt;/td&gt;
        /// &lt;td&gt;Mandatory&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Item Id&lt;/td&gt;
        /// &lt;td&gt;Yes&lt;/td&gt;
        /// &lt;td&gt;[A-z], [a-z], [0-9], [_]
        /// &amp;#40;Underscore&amp;#41;, [-]
        /// &amp;#40;Dash&amp;#41;&lt;br&gt; Max length: 50&lt;/td&gt;
        /// &lt;td&gt;Unique identifier of an item.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Item Name&lt;/td&gt;
        /// &lt;td&gt;Yes&lt;/td&gt;
        /// &lt;td&gt;Any alphanumeric characters&lt;br&gt; Max length:
        /// 255&lt;/td&gt;
        /// &lt;td&gt;Item name.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Item Category&lt;/td&gt;
        /// &lt;td&gt;Yes&lt;/td&gt;
        /// &lt;td&gt;Any alphanumeric characters&lt;br&gt; Max length:
        /// 255&lt;/td&gt;
        /// &lt;td&gt;Category to which this item belongs (e.g. Cooking
        /// Books, Drama...); can be empty.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Description&lt;/td&gt;
        /// &lt;td&gt;No, unless features are present (but can be
        /// empty)&lt;/td&gt;
        /// &lt;td&gt;Any alphanumeric characters &lt;br&gt; Max length:
        /// 4000 &lt;/td&gt;
        /// &lt;td&gt;Description of this item.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Features list&lt;/td&gt;
        /// &lt;td&gt;No&lt;/td&gt;
        /// &lt;td&gt;Any alphanumeric characters &lt;br&gt; Max length:
        /// 4000&lt;/td&gt;
        /// &lt;td&gt;Comma-separated list of feature-name=feature-value
        /// that can be used to enhance model recommendation.&lt;br&gt;
        /// Feature names max length: 255&lt;br&gt;
        /// Feature-value max length: 255&lt;br&gt;
        /// Feature values should be categorical.
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;Example without features&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;
        /// AAA04294,Office Language Pack Online DwnLd,Office&lt;br&gt;
        /// AAA04303,Minecraft Download Game,Games&lt;br&gt;
        /// C9F00168,Kiruna Flip Cover,Accessories&lt;br&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;Example with features&lt;/b&gt;&lt;br&gt;&lt;br /&gt;
        /// AAA04294,Office Language Pack Online DwnLd,Office,,
        /// softwaretype=productivity, compatibility=Windows&lt;br/&gt;
        /// BAB04303,Minecraft DwnLd,Games,, softwaretype=gaming,
        /// compatibility=iOS, agegroup=all&lt;br /&gt;
        /// C9F00168,Kiruna Flip Cover,Accessories,, compatibility=lumia,
        /// hardwaretype=mobile&lt;br /&gt;
        /// &lt;br/&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// More information on what data to collect, including the purpose
        /// of adding features to a catalog can be found at the
        /// &lt;a
        /// href="https://azure.microsoft.com/en-us/documentation/articles/cognitive-services-recommendations-collecting-data/"&gt;Collecting
        /// Training Data&lt;/a&gt; document.
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Notes&lt;/b&gt;&lt;br /&gt;
        /// The maximum number of items supported is 100,000.&lt;br /&gt;
        /// The maximum size of data that can be sent in a single POST call
        /// for this API is 200MB. You may call this API several times upload
        /// more catalog data to your project. &lt;br/&gt;
        /// If you call this API several times, the system will insert only
        /// the new catalog items; Existing items will remain with the
        /// original values.	&lt;br/&gt;
        /// Do not make concurrent calls to this API. Wait for one call to
        /// return before making another call to this API.&lt;br/&gt;
        /// You cannot update catalog items by using this API.
        /// &lt;/p&gt;
        /// 
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model. Only letters (A-Z, a-z), numbers
        /// (0-9), hyphens (-) and underscore (_) are allowed. Max length: 50
        /// </param>
        /// <param name='catalogDisplayName'>
        /// Display name of the catalog data. e.g. "CatalogFile1"
        /// Only letters (A-Z, a-z), numbers (0-9), hyphens (-) and
        /// underscore (_) are allowed. Max length: 50
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='file'>
        /// File to upload.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> UploadcatalogfileWithHttpMessagesAsync(string modelId, string catalogDisplayName, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), string file = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;
        /// Retrieves a list of catalog items. &lt;br /&gt;
        /// Currently the API returns a paginated list of items in JSON
        /// format.
        /// Make sure to set the Accept request header to the desired
        /// format. Currently the only format supported is json, so the
        /// Accept header should be set as follows:
        /// &lt;pre&gt;
        /// Accept:application/json
        /// &lt;/pre&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// You may set the optional 'skip' parameter to start listing items
        /// at an offset.
        /// If the requested number of items (specified using the 'top'
        /// parameters) is larger than the server default page size,	only the
        /// first default page size items will be returned and a '@nextLink'
        /// property will be added to the response, linking to the rest of
        /// the request items.
        /// The parameter 'maxPageSize' defines the maximum items count to
        /// return in a single page.	MaxPageSize will be honored only if
        /// lower than server's default page size.
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Examples&lt;/b&gt; &lt;br /&gt;
        /// (Assuming server's default page size of 10)
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// Example 1: Server driven pagination
        /// &lt;pre&gt;
        /// GET /items
        /// =&amp;gt; {
        /// "items": [1..10],
        /// "@nextLink": "/items?$skip=10"
        /// }
        /// 
        /// GET /items?$skip=10
        /// =&amp;gt; {
        /// "items": [11..20],
        /// "@nextLink": "/items?$skip=20"
        /// }
        /// &lt;/pre&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// Example 2: Server driven pagination where client specified a max
        /// page size lower then the server's default page size:
        /// &lt;pre&gt;
        /// GET /items?$maxpagesize=9
        /// =&amp;gt; {
        /// "items": [1..9],
        /// "@nextLink": "/items?$skip=9&amp;amp;$maxpagesize=9"
        /// }
        /// GET /items?$skip=9&amp;amp;$maxpagesize=9
        /// =&amp;gt; {
        /// "items": [10..18],
        /// "@nextLink": "/items?$skip=18&amp;amp;$maxpagesize=9"
        /// }
        /// &lt;/pre&gt;
        /// &lt;/p&gt;
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='top'>
        /// Format - int32.
        /// </param>
        /// <param name='skip'>
        /// Format - int32.
        /// </param>
        /// <param name='maxpagesize'>
        /// Format - int32.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='file'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetallcatalogitemsWithHttpMessagesAsync(string modelId, int? top = default(int?), int? skip = default(int?), int? maxpagesize = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), string file = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;
        /// Deletes a set of items from the catalog. The set of items should
        /// be passed in the request body, unless deleteAll is set to true.
        /// &lt;p&gt;
        /// &lt;p&gt;
        /// Notes:&lt;br /&gt;
        /// 1. Item Ids	can have a max length of 50 characters and allowed
        /// characters are [A-z], [a-z], [0-9], [_] (Underscore), [-]
        /// (Dash).&lt;br /&gt;
        /// 2.	Deleting a catalog item will not impact the recommendations
        /// served by previous builds. &lt;br /&gt;
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// The request body should contain one line per item that must be
        /// deleted.
        /// The first entry per line should contain the item id to be
        /// deleted. This allows you to either pass just the item id, or in
        /// the same format that is used to upload items to the catalog.
        /// &lt;/p&gt;
        /// 
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;
        /// Example:
        /// &lt;/b&gt;&lt;br /&gt;
        /// PID2342&lt;br /&gt;
        /// FI6342Z&lt;br /&gt;
        /// PID2345&lt;br /&gt;
        /// &lt;/p&gt;
        /// 
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model. Only letters (A-Z, a-z), numbers
        /// (0-9), hyphens (-) and underscore (_) are allowed. Max length: 50
        /// </param>
        /// <param name='deleteAll'>
        /// If set to true, the entire catalog is deleted, else items received
        /// in request body are deleted. Set to false by default.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='file'>
        /// A file containing one line per item that must be deleted.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> DeletecatalogitemsWithHttpMessagesAsync(string modelId, bool? deleteAll = default(bool?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), string file = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;
        /// Updates a set of items in the catalog.
        /// &lt;p&gt;
        /// &lt;p&gt;
        /// The catalog items to be updated should be provided in the
        /// request body.&lt;br /&gt;
        /// If an item exists, it is updated with the new information
        /// provided.&lt;br /&gt;
        /// If an item was not previously in the catalog, it will be added
        /// to the catalog.&lt;br /&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// The format used is the same as the format for uploading catalog
        /// files:
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;
        /// Additional details
        /// &lt;/b&gt;&lt;br /&gt;
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;table border="1" cellpadding="10" cellspacing="10"
        /// style="border-collapse:collapse;"&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Name &lt;/td&gt;
        /// &lt;td&gt;Mandatory&lt;/td&gt;
        /// &lt;td&gt;Type&lt;/td&gt;
        /// &lt;td&gt;Description&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Item Id&lt;/td&gt;
        /// &lt;td&gt;Yes&lt;/td&gt;
        /// &lt;td&gt;[A-z], [a-z], [0-9], [_]
        /// &amp;#40;Underscore&amp;#41;, [-]
        /// &amp;#40;Dash&amp;#41;&lt;br&gt; Max length: 50&lt;/td&gt;
        /// &lt;td&gt;Unique identifier of an item.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Item Name&lt;/td&gt;
        /// &lt;td&gt;Yes&lt;/td&gt;
        /// &lt;td&gt;Any alphanumeric characters&lt;br&gt; Max length:
        /// 255&lt;/td&gt;
        /// &lt;td&gt;Item name.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Item Category&lt;/td&gt;
        /// &lt;td&gt;Yes&lt;/td&gt;
        /// &lt;td&gt;Any alphanumeric characters&lt;br&gt; Max length:
        /// 255&lt;/td&gt;
        /// &lt;td&gt;Category to which this item belongs (e.g. Cooking
        /// Books, Drama...); can be empty.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Description&lt;/td&gt;
        /// &lt;td&gt;No, unless features are present (but can be
        /// empty)&lt;/td&gt;
        /// &lt;td&gt;Any alphanumeric characters &lt;br&gt; Max length:
        /// 4000 &lt;/td&gt;
        /// &lt;td&gt;Description of this item.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Features list&lt;/td&gt;
        /// &lt;td&gt;No&lt;/td&gt;
        /// &lt;td&gt;Any alphanumeric characters &lt;br&gt; Max length:
        /// 4000&lt;/td&gt;
        /// &lt;td&gt;
        /// Comma-separated list of feature-name=feature-value that
        /// can be used to enhance model recommendation.&lt;br&gt;
        /// Feature names max length: 255&lt;br&gt;
        /// Feature-value max length: 255&lt;br&gt;
        /// Feature values should be categorical.
        /// &lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// The request body should contain a file containing one line per
        /// item that will be updated.&lt;br /&gt;
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Example without features&lt;/b&gt;&lt;br /&gt;&lt;br
        /// /&gt;
        /// AAA04294,Office Language Pack Online DwnLd,Office&lt;br&gt;
        /// AAA04303,Minecraft Download Game,Games&lt;br&gt;
        /// C9F00168,Kiruna Flip Cover,Accessories&lt;br&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;Example with features&lt;/b&gt;&lt;br&gt;&lt;br /&gt;
        /// AAA04294,Office Language Pack Online DwnLd,Office,,
        /// softwaretype=productivity, compatibility=Windows&lt;br /&gt;
        /// BAB04303,Minecraft DwnLd,Games,, softwaretype=gaming,
        /// compatibility=iOS, agegroup=all&lt;br /&gt;
        /// C9F00168,Kiruna Flip Cover,Accessories,, compatibility=lumia,
        /// hardwaretype=mobile&lt;br /&gt;
        /// &lt;br /&gt;
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Notes&lt;/b&gt;&lt;br /&gt;
        /// 1. The maximum number of items supported is 100,000.&lt;br /&gt;
        /// 2. The maximum size of data that can be sent in a single PATCH
        /// call for this API is 200MB.&lt;br /&gt;
        /// 3. Do not make concurrent calls to this API. Wait for one call
        /// to return before making another call to this API.&lt;br /&gt;
        /// &lt;/p&gt;
        /// 
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model. Only letters (A-Z, a-z), numbers
        /// (0-9), hyphens (-) and underscore (_) are allowed. Max length: 50
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='file'>
        /// A file containing one line per item that will be updated.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> UpdatecatalogitemsWithHttpMessagesAsync(string modelId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), string file = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;
        /// Once you have created a model and uploaded catalog data, you
        /// should upload usage data to it before you can train the system
        /// and create a build.
        /// The usage data describes all the transactions that your customers
        /// have made in the past; in essence the interactions between users
        /// and items.
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// It needs to be passed as the content of body request and it
        /// should follow the format below:&lt;br /&gt;
        /// &amp;lt;User Id&amp;gt;,&amp;lt;Item
        /// Id&amp;gt;,&amp;lt;Time&amp;gt;,[&amp;lt;Event type&amp;gt;]
        /// &lt;p&gt;
        /// &lt;b&gt;
        /// Additional details
        /// &lt;/b&gt;&lt;br /&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;table border="1" cellpadding="10" cellspacing="10"
        /// style="border-collapse:collapse;"&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Name &lt;/td&gt;
        /// &lt;td&gt;Mandatory&lt;/td&gt;
        /// &lt;td&gt;Type&lt;/td&gt;
        /// &lt;td&gt;Description&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;User Id&lt;/td&gt;
        /// &lt;td&gt;Yes&lt;/td&gt;
        /// &lt;td&gt;[A-z], [a-z], [0-9], [_]
        /// &amp;#40;Underscore&amp;#41;, [-]
        /// &amp;#40;Dash&amp;#41;&lt;br&gt; Max length: 255&lt;/td&gt;
        /// &lt;td&gt;Unique identifier of a user.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Item Id&lt;/td&gt;
        /// &lt;td&gt;Yes&lt;/td&gt;
        /// &lt;td&gt;[A-z], [a-z], [0-9], [_]
        /// &amp;#40;Underscore&amp;#41;, [-]
        /// &amp;#40;Dash&amp;#41;&lt;br&gt; Max length: 50&lt;/td&gt;
        /// &lt;td&gt;Unique identifier of an item.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Time&lt;/td&gt;
        /// &lt;td&gt;Yes&lt;/td&gt;
        /// &lt;td&gt;Date in format: YYYY-MM-DDTHH:MM:SS&lt;br /&gt;
        /// (e.g. 2013-06-20T10:00:00)&lt;/td&gt;
        /// &lt;td&gt;Transaction time.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;tr&gt;
        /// &lt;td&gt;Event&lt;/td&gt;
        /// &lt;td&gt;No&lt;/td&gt;
        /// &lt;td&gt;
        /// One of the following: &lt;br /&gt;
        /// - Click&lt;br /&gt;
        /// - RecommendationClick&lt;br /&gt;
        /// - AddShopCart&lt;br /&gt;
        /// - RemoveShopCart&lt;br /&gt;
        /// - Purchase&lt;br /&gt;
        /// &lt;/td&gt;
        /// &lt;td&gt;The type of transaction. If no usage event is
        /// defined, Purchase will be assumed.&lt;/td&gt;
        /// &lt;/tr&gt;
        /// &lt;/table&gt;
        /// &lt;br /&gt;
        /// &lt;br /&gt;
        /// &lt;b&gt;Example&lt;/b&gt;
        /// &lt;br /&gt;
        /// 168064,6485200,2013/06/20T10:00:00, Purchase
        /// &lt;br /&gt;
        /// 263325,6485200,2013/06/20T10:00:00, Purchase
        /// &lt;br /&gt;
        /// 190485,6485200,2013/06/20T10:00:00, Click
        /// &lt;br /&gt;
        /// 225087,6485936,2013/06/20T10:00:00, Purchase
        /// &lt;br /&gt;
        /// ...
        /// 
        /// &lt;p&gt;
        /// More information on what data to collect can be found at the
        /// &lt;a
        /// href="https://azure.microsoft.com/en-us/documentation/articles/cognitive-services-recommendations-collecting-data/"&gt;Collecting
        /// Training Data&lt;/a&gt; document.
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;Notes &lt;/b&gt;
        /// &lt;br /&gt;
        /// You need to upload a catalog file before you start adding usage
        /// data to your model. Only items in the catalog file will be used
        /// during the training phase. All other items will be ignored.
        /// &lt;br/&gt;
        /// The maximum size of data that can be sent in POST call for this
        /// API is 200MB. If you need to upload more than 200MB of usage
        /// data, you may call this API several times.
        /// &lt;br /&gt;
        /// The maximum number of usage points that are kept is ~5,000,000.
        /// The oldest will be deleted if new ones will be uploaded or
        /// reported.
        /// &lt;/p&gt;
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model.
        /// </param>
        /// <param name='usageDisplayName'>
        /// Display name of the usage data. e.g. "UsageFile1"
        /// Only letters(A-Z, a-z), numbers(0-9), hyphens(-) and
        /// underscore(_) are allowed. Max length: 50
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='file'>
        /// File to upload
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> UploadusagefileWithHttpMessagesAsync(string modelId, string usageDisplayName, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), string file = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists all the usage events files of a model
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> ListusagefilesWithHttpMessagesAsync(string modelId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes all usage file of a model
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> DeleteallusagefilesWithHttpMessagesAsync(string modelId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for catalog items.
        /// 
        /// Retrieves a list of catalog items using the ids provided or items
        /// that contain the given search term.
        /// The 'ids' and 'searchTerm' parameters cannot be used together. If
        /// both are provided, only the searchTerm parameter will be ignored.
        /// If provided, the searchTerm parameters must be at least 3
        /// characters long.
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='ids'>
        /// The ids of the catalog items to retrieve
        /// </param>
        /// <param name='searchTerm'>
        /// The search term to filter by catalog items by
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetspecificcatalogitemsbysearchtermWithHttpMessagesAsync(string modelId, string ids = default(string), string searchTerm = default(string), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the details of all rules for a model.
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetallbusinessrulesWithHttpMessagesAsync(string modelId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;
        /// Adds a new business rule for a model.		 These are the types of
        /// rules supported: &lt;br /&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;BlockList&lt;/b&gt; - BlockList enables you to provide
        /// a list of items that you do not want to return in the
        /// recommendation results.
        /// &lt;br /&gt;
        /// &lt;b&gt;FeatureBlockList&lt;/b&gt; - Feature BlockList
        /// enables you to block items based on the values of its features.
        /// Do not send more than 1000 items in a single blocklist rule or
        /// your call may timeout. If you need to block more than 1000 items,
        /// you can make several blocklist calls.&lt;br /&gt;
        /// &lt;b&gt;Upsale&lt;/b&gt; - Upsale enables you to enforce items
        /// to return in the recommendation results.&lt;br/&gt;
        /// &lt;b&gt;WhiteList&lt;/b&gt; - White List enables you to only
        /// suggest recommendations from a list of items.
        /// &lt;br /&gt;
        /// &lt;b&gt;FeatureWhiteList&lt;/b&gt; - Feature White List
        /// enables you to only recommend items that have specific feature
        /// values.
        /// &lt;br /&gt;
        /// &lt;b&gt;PerSeedBlockList&lt;/b&gt; - Per Seed Block List
        /// enables you to provide per item a list of items that cannot be
        /// returned as recommendation results.
        /// &lt;br /&gt;
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// Note: The call will fail if any of the itemIds or features
        /// provided are invalid. Make sure that the items are part of the
        /// catalog before creating a rule for those items.
        /// &lt;/p&gt;
        /// 
        /// &lt;p&gt;
        /// &lt;b&gt;Sample request bodies&lt;/b&gt;
        /// &lt;/p&gt;
        /// BlockList rule:
        /// &lt;PRE&gt;
        /// {
        /// "type": "blocklist",
        /// "parameters": {
        /// "blockList": { "itemIds": ["2406E770-QWR","3906E110-769"] }
        /// }
        /// }
        /// &lt;/PRE&gt;
        /// 
        /// FeatureBlockList rule:
        /// &lt;PRE&gt;
        /// {
        /// "type": "featureBlockList",
        /// "parameters": {
        /// "featureBlockList": { "name": "Movie_category",
        /// "values":["Adult","Drama"] }
        /// }
        /// }
        /// &lt;/PRE&gt;
        /// 
        /// Upsale rule:
        /// &lt;PRE&gt;
        /// {
        /// "type": "upsale",
        /// "parameters": {
        /// "upsale":
        /// {"itemIds":["2406E770-769C-4189-89DE-1C9283F93A96"],"NumberOfItemsToUpsale":5}
        /// }
        /// }
        /// &lt;/PRE&gt;
        /// 
        /// 
        /// Whitelist rule:
        /// &lt;PRE&gt;
        /// {
        /// "type": "whitelist",
        /// "parameters": {
        /// "whitelist": {"itemIds":["2406E770-QWR","3906E110-769"]}
        /// }
        /// }
        /// &lt;/PRE&gt;
        /// 
        /// 
        /// FeatureWhiteList rule:
        /// &lt;PRE&gt;
        /// {
        /// "type": "featureWhiteList",
        /// "parameters": {
        /// "featureWhiteList": {"name":"Movie_rating","values":["PG13",
        /// "PG"]}
        /// }
        /// }
        /// &lt;/PRE&gt;
        /// 
        /// 
        /// PerSeedBlockList rule:
        /// &lt;PRE&gt;
        /// {
        /// "type": "perSeedBlockList",
        /// "parameters": {
        /// "perSeedBlockList": {"seedItems":["9949"],
        /// "itemsToExclude":["9862","8158","8244"]}
        /// }
        /// }
        /// &lt;/PRE&gt;
        /// 
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='ruleRequestInfo'>
        /// Parameters for the rule request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> CreatebusinessruleWithHttpMessagesAsync(string modelId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), RuleRequestInfo ruleRequestInfo = default(RuleRequestInfo), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all rules
        /// </summary>
        /// <param name='modelId'>
        /// The model id
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> DeleteallbusinessrulesWithHttpMessagesAsync(string modelId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves information about a rule
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='ruleId'>
        /// Format - int64. Unique identifier of the rule
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetbusinessruleWithHttpMessagesAsync(string modelId, int ruleId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a rule by ID
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the rule
        /// </param>
        /// <param name='ruleId'>
        /// Format - int64. Unique identifier of the rule
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> DeletebusinessruleWithHttpMessagesAsync(string modelId, int ruleId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a usage event to a model.
        /// If buildId is set to "-1",	the event is ingested against the
        /// Active Build of the model.
        /// Set the buildId is set to null or 0, the events are ingested
        /// against the Active build, if Active build doesn't
        /// exist, the events are not associated with any build.
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='usageEvent'>
        /// The usage event to upload
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> UploadusageeventWithHttpMessagesAsync(string modelId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), UsageEvent usageEvent = default(UsageEvent), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return metrics such as precision and diversity for a given build.
        /// 
        /// As part of the precision and diversity metrics evaluation, the
        /// system finds a sample of users, and then the transactions
        /// for those users are split into two groups: the training dataset
        /// and the test dataset. In order to get metrics, you should have
        /// set the enableModelingInsights parameter to true at build time.
        /// 
        /// &lt;p&gt;
        /// Learn more about build metrics on the offline evaluation section
        /// of the &lt;a
        /// href="https://azure.microsoft.com/en-us/documentation/articles/cognitive-services-recommendations-buildtypes/"&gt;Build
        /// Types and Model Quality&lt;/a&gt; documentation.
        /// &lt;/p&gt;
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='buildId'>
        /// Format - int64. Unique identifier of the build
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetbuildmetricsWithHttpMessagesAsync(string modelId, int buildId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download a specific usage file
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model.
        /// </param>
        /// <param name='fileId'>
        /// The usage file id to download
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> DownloadusagefileWithHttpMessagesAsync(string modelId, string fileId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a specific usage file
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model.
        /// </param>
        /// <param name='fileId'>
        /// The usage file id to delete
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> DeleteusagefileWithHttpMessagesAsync(string modelId, string fileId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Feature info from given modelId and rankBuildId
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='rankBuildId'>
        /// Format - int64. The buildId used for the ranking request.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetmodelfeaturesWithHttpMessagesAsync(string modelId, int? rankBuildId = default(int?), string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submits a Batch Execution job.
        /// &lt;p&gt;
        /// There are situations when you need to get recommendations for more
        /// than one item at a time. For instance, you may be interested in
        /// creating a recommendations cache or even doing an analysis on the
        /// types of recommendations you are getting.
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// Batch scoring operations are asynchronous operations.	This API
        /// allows you to kick start the scoring operation.	Once the
        /// operation is started, you need to wait for it to complete before
        /// you can gather the results of the operation.
        /// The response from the creation call with contain a header called
        /// &lt;i&gt;Operation-Location&lt;/i&gt;. You can use this operation
        /// location to query the status of the batch processing.
        /// See the "Get operation status" API.
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;Sample request body&lt;/b&gt;
        /// &lt;/p&gt;
        /// &lt;pre&gt;
        /// {
        /// "input": {
        /// "authenticationType": "PublicOrSas",
        /// "baseLocation": "https://mystorage1.blob.core.windows.net/",
        /// "relativeLocation": "container1/batchInput.json",
        /// "sasBlobToken": "?sv=2015-07_restofToken_...&amp;sp=rw"
        /// },
        /// "output": {
        /// "authenticationType": "PublicOrSas",
        /// "baseLocation": "https://mystorage1.blob.core.windows.net/",
        /// "relativeLocation": "container1/batchOutput.json ",
        /// "sasBlobToken": "?sv=2015-07_restofToken_...4Z&amp;sp=rw"
        /// },
        /// "error": {
        /// "authenticationType": "PublicOrSas",
        /// "baseLocation": "https://mystorage1.blob.core.windows.net/",
        /// "relativeLocation": "container1/errors.txt",
        /// "sasBlobToken": "?sv=2015-07_restofToken_...4Z&amp;sp=rw"
        /// },
        /// "job": {
        /// "apiName": "ItemRecommend",
        /// "modelId": "9ac12a0a-1add-4bdc-bf42-c6517942b3a6",
        /// "buildId": 1015703,
        /// "numberOfResults": 10,
        /// "includeMetadata": true,
        /// "minimalScore": 0.0
        /// }
        /// }
        /// &lt;/pre&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;	Limitations&lt;/b&gt;&lt;br /&gt;
        /// Currently only one scoring job is allowed at a time.&lt;br /&gt;
        /// A batch job input file cannot be more than 2MB.&lt;br /&gt;
        /// &lt;/p&gt;
        /// </summary>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='batchJobsRequestInfo'>
        /// Parameters for the new batch job
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ErrorResponse>> StartbatchjobWithHttpMessagesAsync(string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), BatchJobsRequestInfo batchJobsRequestInfo = default(BatchJobsRequestInfo), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about an ongoing batch jobs.
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetallbatchjobsWithHttpMessagesAsync(string jobId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// &lt;p&gt;Retrieves the statistics about the data used to create a
        /// given build of the model. &lt;/p&gt;
        /// 
        /// The following statistics are returned:
        /// &lt;p&gt;
        /// &lt;b&gt;numberOfCatalogItems&lt;/b&gt;&lt;br /&gt; Number of
        /// items in catalog
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;numberOfCatalogItemsInUsage&lt;/b&gt;&lt;br /&gt;
        /// Number of items in raw usage file (before any processing)
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;numberOfUsers&lt;/b&gt;&lt;br /&gt; Number of users in
        /// raw usage file (before any processing)
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;numberOfUsageRecords&lt;/b&gt;&lt;br /&gt; Number of
        /// usage records in raw usage file (before any processing)
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;catalogCoverage&lt;/b&gt;&lt;br /&gt;
        /// numberOfCatalogItemsInUsage / numberOfCatalogItems
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;numberOfCatalogItemsInBuild&lt;/b&gt;&lt;br /&gt;
        /// Number of items in catalog that were actually used for modelling
        /// in the specified build
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;numberOfUsersInBuild&lt;/b&gt;&lt;br /&gt; Number of
        /// users that were actually used for modelling in the specified
        /// build
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;numberOfUsageRecordsInBuild&lt;/b&gt;&lt;br /&gt;
        /// Number of usage records that were actually used for modelling in
        /// the specified build
        /// &lt;/p&gt;
        /// &lt;p&gt;
        /// &lt;b&gt;catalogCoverageInBuild&lt;/b&gt;&lt;br /&gt;
        /// numberOfCatalogItemsInBuild / numberOfCatalogItems
        /// &lt;/p&gt;
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='buildId'>
        /// Format - int64. Unique identifier of the build
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetbuilddatastatisticsWithHttpMessagesAsync(string modelId, int buildId, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets statistics about the user interactions (usage) during a given
        /// time interval for a particular model. This can be helpful in
        /// order to calculate conversion rates.
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='interval'>
        /// It specifies the start and end date in ISO 8601 format. For
        /// instance: "2007-03-01T13:00:00Z/2008-05-11T15:30:00Z"
        /// </param>
        /// <param name='eventTypes'>
        /// Comma separated list of "EventTypes". Supported event types:
        /// Click, RecommendationClick, AddShopCart, RemoveShopCart,
        /// Purchase.
        /// Empty string or null to get all events.
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetusagestatisticsforamodelWithHttpMessagesAsync(string modelId, string interval, string eventTypes, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets statistics about the user interactions (usage) during a given
        /// time interval for a particular build. This can be helpful in
        /// order to calculate conversion rates.
        /// </summary>
        /// <param name='modelId'>
        /// Unique identifier of the model
        /// </param>
        /// <param name='buildId'>
        /// Format - int64. Unique identifier of the build
        /// </param>
        /// <param name='interval'>
        /// It specifies the start and end date in ISO 8601 format. For
        /// instance: "2007-03-01T13:00:00Z/2008-05-11T15:30:00Z"
        /// </param>
        /// <param name='eventTypes'>
        /// Comma separated list of "EventTypes". Empty string or null to get
        /// all events
        /// </param>
        /// <param name='subscriptionKey'>
        /// subscription key in url
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// subscription key in header
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetusagestatisticsforabuildWithHttpMessagesAsync(string modelId, int buildId, string interval, string eventTypes, string subscriptionKey = default(string), string ocpApimSubscriptionKey = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}
